{"ast":null,"code":"//用来根据现有的state和指定的action，返回新的state的函数\nimport { combineReducers } from 'redux';\nimport storageUtils from \"../utils/storageUtils\";\nconst initHeadState = '首页'; //用来管理头部标题的reducer函数\n\nfunction headTitle(state = initHeadState, action) {\n  const {\n    type,\n    data\n  } = action;\n\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nconst initUser = storageUtils.getUser(); //用来管理当前登录用户的\n\nfunction user(state = initUser, action) {\n  const {\n    type,\n    data\n  } = action;\n\n  switch (type) {\n    default:\n      return state;\n  }\n} //向外暴露合并之后的reducer  管理的总的state的结构：\n//   {\n//      headTitle:'首页'\n//      user:storageUtils.getUser()\n//   }\n\n\nexport default combineReducers({\n  headTitle,\n  user\n});","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/redux/reducer.js"],"names":["combineReducers","storageUtils","initHeadState","headTitle","state","action","type","data","initUser","getUser","user"],"mappings":"AAAA;AACA,SAAQA,eAAR,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,MAAMC,aAAa,GAAC,IAApB,C,CACA;;AACA,SAAUC,SAAV,CAAoBC,KAAK,GAACF,aAA1B,EAAwCG,MAAxC,EAA+C;AAC3C,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAYF,MAAlB;;AACA,UAAOC,IAAP;AAEI;AACI,aAAOF,KAAP;AAHR;AAKH;;AAGD,MAAMI,QAAQ,GAACP,YAAY,CAACQ,OAAb,EAAf,C,CACA;;AACA,SAASC,IAAT,CAAcN,KAAK,GAACI,QAApB,EAA6BH,MAA7B,EAAoC;AAChC,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAYF,MAAlB;;AACA,UAAOC,IAAP;AACI;AACI,aAAOF,KAAP;AAFR;AAIH,C,CAED;AACA;AACA;AACA;AACA;;;AACA,eAAeJ,eAAe,CAAC;AAC3BG,EAAAA,SAD2B;AACjBO,EAAAA;AADiB,CAAD,CAA9B","sourcesContent":["//用来根据现有的state和指定的action，返回新的state的函数\r\nimport {combineReducers}  from 'redux'\r\nimport storageUtils from \"../utils/storageUtils\"\r\n\r\nconst initHeadState='首页'\r\n//用来管理头部标题的reducer函数\r\nfunction  headTitle(state=initHeadState,action){\r\n    const {type,data}=action\r\n    switch(type){\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst initUser=storageUtils.getUser()\r\n//用来管理当前登录用户的\r\nfunction user(state=initUser,action){\r\n    const {type,data}=action\r\n    switch(type){\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//向外暴露合并之后的reducer  管理的总的state的结构：\r\n//   {\r\n//      headTitle:'首页'\r\n//      user:storageUtils.getUser()\r\n//   }\r\nexport default combineReducers({\r\n    headTitle,user\r\n})"]},"metadata":{},"sourceType":"module"}