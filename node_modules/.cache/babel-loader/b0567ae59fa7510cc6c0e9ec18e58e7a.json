{"ast":null,"code":"/*\r\n包含n个action creator函数的模块\r\n同步action: 对象 {type: 'xxx', data: 数据值}\r\n异步action: 函数  dispatch => {}\r\n */\nimport { SET_HEAD_TITLE, RECEIVE_USER, SHOW_ERROR_MSG, RESET_USER } from './action-types';\nimport { reqLogin } from '../api';\nimport storageUtils from \"../utils/storageUtils\";\n/*\r\n设置头部标题的同步action\r\n */\n\nexport const setHeadTitle = headTitle => ({\n  type: SET_HEAD_TITLE,\n  data: headTitle\n});\n/*\r\n接收用户的同步action\r\n */\n\nexport const receiveUser = user => ({\n  type: RECEIVE_USER,\n  user\n});\n/*\r\n显示错误信息同步action\r\n */\n\nexport const showErrorMsg = errorMsg => ({\n  type: SHOW_ERROR_MSG,\n  errorMsg\n});\n/*\r\n退出登陆的同步action\r\n */\n\nexport const logout = () => {\n  // 删除local中的user\n  storageUtils.removeUser(); // 返回action对象\n\n  return {\n    type: RESET_USER\n  };\n};\n/*\r\n登陆的异步action\r\n */\n\nexport const login = (username, password) => {\n  return async dispatch => {\n    // 1. 执行异步ajax请求\n    const result = await reqLogin(username, password); // {status: 0, data: user} {status: 1, msg: 'xxx'}\n    // 2.1. 如果成功, 分发成功的同步action\n\n    if (result.status === 0) {\n      const user = result.data; // 保存local中\n\n      storageUtils.saveUser(user); // 分发接收用户的同步action\n\n      dispatch(receiveUser(user));\n    } else {\n      // 2.2. 如果失败, 分发失败的同步action\n      const msg = result.msg; // message.error(msg)\n\n      dispatch(showErrorMsg(msg));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/redux/actions.js"],"names":["SET_HEAD_TITLE","RECEIVE_USER","SHOW_ERROR_MSG","RESET_USER","reqLogin","storageUtils","setHeadTitle","headTitle","type","data","receiveUser","user","showErrorMsg","errorMsg","logout","removeUser","login","username","password","dispatch","result","status","saveUser","msg"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SACEA,cADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,UAJF,QAKO,gBALP;AAMA,SAAQC,QAAR,QAAuB,QAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,SAAD,KAAgB;AAACC,EAAAA,IAAI,EAAER,cAAP;AAAuBS,EAAAA,IAAI,EAAEF;AAA7B,CAAhB,CAArB;AAEP;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAAIC,IAAD,KAAW;AAACH,EAAAA,IAAI,EAAEP,YAAP;AAAqBU,EAAAA;AAArB,CAAX,CAApB;AAEP;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,QAAD,KAAe;AAACL,EAAAA,IAAI,EAAEN,cAAP;AAAuBW,EAAAA;AAAvB,CAAf,CAArB;AAEP;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,MAAO;AAC3B;AACAT,EAAAA,YAAY,CAACU,UAAb,GAF2B,CAG3B;;AACA,SAAO;AAACP,IAAAA,IAAI,EAAEL;AAAP,GAAP;AACD,CALM;AAOP;AACA;AACA;;AACA,OAAO,MAAMa,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3C,SAAO,MAAMC,QAAN,IAAkB;AACvB;AACA,UAAMC,MAAM,GAAG,MAAMhB,QAAQ,CAACa,QAAD,EAAWC,QAAX,CAA7B,CAFuB,CAE4B;AACnD;;AACA,QAAGE,MAAM,CAACC,MAAP,KAAgB,CAAnB,EAAsB;AACpB,YAAMV,IAAI,GAAGS,MAAM,CAACX,IAApB,CADoB,CAEpB;;AACAJ,MAAAA,YAAY,CAACiB,QAAb,CAAsBX,IAAtB,EAHoB,CAIpB;;AACAQ,MAAAA,QAAQ,CAACT,WAAW,CAACC,IAAD,CAAZ,CAAR;AACD,KAND,MAMO;AAAE;AACP,YAAMY,GAAG,GAAGH,MAAM,CAACG,GAAnB,CADK,CAEL;;AACAJ,MAAAA,QAAQ,CAACP,YAAY,CAACW,GAAD,CAAb,CAAR;AACD;AAEF,GAhBD;AAiBD,CAlBM","sourcesContent":["/*\r\n包含n个action creator函数的模块\r\n同步action: 对象 {type: 'xxx', data: 数据值}\r\n异步action: 函数  dispatch => {}\r\n */\r\nimport {\r\n  SET_HEAD_TITLE,\r\n  RECEIVE_USER,\r\n  SHOW_ERROR_MSG,\r\n  RESET_USER\r\n} from './action-types'\r\nimport {reqLogin} from '../api'\r\nimport storageUtils from \"../utils/storageUtils\";\r\n\r\n/*\r\n设置头部标题的同步action\r\n */\r\nexport const setHeadTitle = (headTitle) => ({type: SET_HEAD_TITLE, data: headTitle})\r\n\r\n/*\r\n接收用户的同步action\r\n */\r\nexport const receiveUser = (user) => ({type: RECEIVE_USER, user})\r\n\r\n/*\r\n显示错误信息同步action\r\n */\r\nexport const showErrorMsg = (errorMsg) => ({type: SHOW_ERROR_MSG, errorMsg})\r\n\r\n/*\r\n退出登陆的同步action\r\n */\r\nexport const logout = () =>  {\r\n  // 删除local中的user\r\n  storageUtils.removeUser()\r\n  // 返回action对象\r\n  return {type: RESET_USER}\r\n}\r\n\r\n/*\r\n登陆的异步action\r\n */\r\nexport const login = (username, password) => {\r\n  return async dispatch => {\r\n    // 1. 执行异步ajax请求\r\n    const result = await reqLogin(username, password)  // {status: 0, data: user} {status: 1, msg: 'xxx'}\r\n    // 2.1. 如果成功, 分发成功的同步action\r\n    if(result.status===0) {\r\n      const user = result.data\r\n      // 保存local中\r\n      storageUtils.saveUser(user)\r\n      // 分发接收用户的同步action\r\n      dispatch(receiveUser(user))\r\n    } else { // 2.2. 如果失败, 分发失败的同步action\r\n      const msg = result.msg\r\n      // message.error(msg)\r\n      dispatch(showErrorMsg(msg))\r\n    }\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}