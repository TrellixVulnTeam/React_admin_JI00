{"ast":null,"code":"import\"antd/es/button/style\";import _Button from\"antd/es/button\";import\"antd/es/input/style\";import _Input from\"antd/es/input\";import\"antd/es/icon/style\";import _Icon from\"antd/es/icon\";import _regeneratorRuntime from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import\"antd/es/form/style\";import _Form from\"antd/es/form\";import React,{Component}from'react';import'./index.less';import{Redirect}from'react-router-dom';import{connect}from'react-redux';import{login}from'../../redux/actions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Item=_Form.Item;// 不能写在import之前\n/*\r\n登陆的路由组件\r\n */var Login=/*#__PURE__*/function(_Component){_inherits(Login,_Component);var _super=_createSuper(Login);function Login(){var _this;_classCallCheck(this,Login);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.handleSubmit=function(event){// 阻止事件的默认行为\nevent.preventDefault();// 得到form对象\n// const form = this.props.form\n// // 获取表单项的输入数据\n// const values = form.getFieldsValue()\n// console.log('handleSubmit()', values)\n//对所有表单字段进行验证\n_this.props.form.validateFields(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(err,values){var username,password;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://校验成功\nif(!err){// console.log('提交登录的ajax请求 ', values);\nusername=values.username,password=values.password;//调用分发异步action发送登录异步请求，游乐结果更新状态\n_this.props.login(username,password);//   console.log(username,password)\n// // reqLogin(username,password).then(response=>{console.log(response.data)}).catch((err)=>{console.log(err)})\n// //这里不需要自己处理错误，已经封装好了\n// // try {\n// //   const res=await reqLogin(username,password)\n// //   console.log(res.data)\n// // }catch(error){\n// // alert('请求出错了',error.message)\n// // }\n//    const result=await reqLogin(username,password)\n//   //  const result=response.data     //{status:0,data:user}      {status:1,msg}\n//    if(result.status===0){   //登录成功\n//       message.success('登录成功')\n//       //跳转之前保存user(内存)\n//       const user=result.data\n//       memoryUtils.user=user\n//       //同时还得缓存起来(本地)\n//       storageUtils.saveUser(user)\n//       //跳转到管理界面  所有路由组件都有history属性\n//       this.props.history.replace('/home')\n//    }else {      //登录失败\n//         message.error(result.msg)\n//    }\n}else{console.log('校验失败');}case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());};_this.validatePwd=function(rule,value,callback){console.log('validatePwd()',rule,value);if(!value){callback('密码必须输入');}else if(value.length<4){callback('密码长度不能小于4位');}else if(value.length>12){callback('密码长度不能大于12位');}else if(!/^[a-zA-Z0-9_]+$/.test(value)){callback('密码必须是英文、数字或下划线组成');}else{callback();// 验证通过\n}// callback('xxxx') // 验证失败, 并指定提示的文本\n};return _this;}_createClass(Login,[{key:\"render\",value:function render(){//判断用户是否登录 如果用户登录了自动跳转管理界面\nvar user=this.props.user;if(user&&user._id){// this.props.history.replace('/') 也可以\nreturn/*#__PURE__*/_jsx(Redirect,{to:\"/home\"});}// const errorMsg=this.props.user.errorMsg\n// 得到具强大功能的form对象\nvar form=this.props.form;var getFieldDecorator=form.getFieldDecorator;return/*#__PURE__*/_jsxs(\"div\",{className:\"login\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"login-header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"React \\u5546\\u54C1\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF\"})}),/*#__PURE__*/_jsxs(\"section\",{className:\"login-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u7528\\u6237\\u767B\\u9646\"}),/*#__PURE__*/_jsxs(_Form,{onSubmit:this.handleSubmit,className:\"login-form\",children:[/*#__PURE__*/_jsx(Item,{children:getFieldDecorator('username',{// 配置对象: 属性名是特定的一些名称\n// 声明式验证: 直接使用别人定义好的验证规则进行验证\nrules:[{required:true,whitespace:true,message:'用户名必须输入'},{min:4,message:'用户名至少4位'},{max:12,message:'用户名最多12位'},{pattern:/^[a-zA-Z0-9_]+$/,message:'用户名必须是英文、数字或下划线组成'}],initialValue:'admin'// 初始值\n})(/*#__PURE__*/_jsx(_Input,{prefix:/*#__PURE__*/_jsx(_Icon,{type:\"user\",style:{color:'rgba(0,0,0,.25)'}}),placeholder:\"\\u7528\\u6237\\u540D\"}))}),/*#__PURE__*/_jsx(_Form.Item,{children:getFieldDecorator('password',{rules:[{validator:this.validatePwd}]})(/*#__PURE__*/_jsx(_Input,{prefix:/*#__PURE__*/_jsx(_Icon,{type:\"lock\",style:{color:'rgba(0,0,0,.25)'}}),type:\"password\",placeholder:\"\\u5BC6\\u7801\"}))}),/*#__PURE__*/_jsx(_Form.Item,{children:/*#__PURE__*/_jsx(_Button,{type:\"primary\",htmlType:\"submit\",className:\"login-form-button\",children:\"\\u767B\\u9646\"})})]})]})]});}}]);return Login;}(Component);/*\r\n1. 高阶函数\r\n    1). 一类特别的函数\r\n        a. 接受函数类型的参数\r\n        b. 返回值是函数\r\n    2). 常见\r\n        a. 定时器: setTimeout()/setInterval()\r\n        b. Promise: Promise(() => {}) then(value => {}, reason => {})\r\n        c. 数组遍历相关的方法: forEach()/filter()/map()/reduce()/find()/findIndex()\r\n        d. 函数对象的bind()\r\n        e. Form.create()() / getFieldDecorator()()\r\n    3). 高阶函数更新动态, 更加具有扩展性\r\n\r\n2. 高阶组件\r\n    1). 本质就是一个函数\r\n    2). 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性\r\n    3). 作用: 扩展组件的功能\r\n    4). 高阶组件也是高阶函数: 接收一个组件函数, 返回是一个新的组件函数\r\n */ /*\r\n包装Form组件生成一个新的组件: Form(Login)\r\n新组件会向Form组件传递一个强大的对象属性: form\r\n */var WrapLogin=_Form.create()(Login);export default connect(function(state){return{user:state.user};},{login:login})(WrapLogin);/*\r\n1. 前台表单验证\r\n2. 收集表单输入数据\r\n */ //async和awais\n//1.作用？\n//简化promise对象的使用：不再使用then()来指定成功/失败的回调函数  以同步编码（没有回调函数了）方式实现异步流程\n//2.哪里写await\n// 在返回promsie的表达式的左侧写await：不想要promsie，想要promsie异步执行成功的value数据\n//3.哪里写async\n//在promsie所在的函数前面写async","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/pages/login/index.jsx"],"names":["React","Component","Redirect","connect","login","Item","Login","handleSubmit","event","preventDefault","props","form","validateFields","err","values","username","password","console","log","validatePwd","rule","value","callback","length","test","user","_id","getFieldDecorator","rules","required","whitespace","message","min","max","pattern","initialValue","color","validator","WrapLogin","create","state"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {\r\n  Form,\r\n  Icon,\r\n  Input,\r\n  Button,\r\n  // message,\r\n} from 'antd'\r\nimport './index.less'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {login} from '../../redux/actions'\r\n\r\nconst Item = Form.Item // 不能写在import之前\r\n/*\r\n登陆的路由组件\r\n */\r\nclass Login extends Component {\r\n\r\n handleSubmit = (event) => {\r\n\r\n    // 阻止事件的默认行为\r\n    event.preventDefault()\r\n    // 得到form对象\r\n    // const form = this.props.form\r\n\r\n    // // 获取表单项的输入数据\r\n    // const values = form.getFieldsValue()\r\n    // console.log('handleSubmit()', values)\r\n\r\n    //对所有表单字段进行验证\r\n    this.props.form.validateFields(async(err, values) => {\r\n      //校验成功\r\n      if (!err) {\r\n            // console.log('提交登录的ajax请求 ', values);\r\n          const {username,password}=values\r\n          //调用分发异步action发送登录异步请求，游乐结果更新状态\r\n        this.props.login(username,password)\r\n\r\n          //   console.log(username,password)\r\n          // // reqLogin(username,password).then(response=>{console.log(response.data)}).catch((err)=>{console.log(err)})\r\n\r\n          // //这里不需要自己处理错误，已经封装好了\r\n          // // try {\r\n          // //   const res=await reqLogin(username,password)\r\n          // //   console.log(res.data)\r\n          // // }catch(error){\r\n          // // alert('请求出错了',error.message)\r\n          // // }\r\n\r\n          //    const result=await reqLogin(username,password)\r\n          //   //  const result=response.data     //{status:0,data:user}      {status:1,msg}\r\n          //    if(result.status===0){   //登录成功\r\n          //       message.success('登录成功')\r\n\r\n          //       //跳转之前保存user(内存)\r\n          //       const user=result.data\r\n          //       memoryUtils.user=user\r\n\r\n          //       //同时还得缓存起来(本地)\r\n          //       storageUtils.saveUser(user)\r\n\r\n          //       //跳转到管理界面  所有路由组件都有history属性\r\n          //       this.props.history.replace('/home')\r\n          //    }else {      //登录失败\r\n          //         message.error(result.msg)\r\n          //    }\r\n            \r\n      }else{\r\n        console.log('校验失败')\r\n      }\r\n    });\r\n  }\r\n  /*\r\n  对密码进行自定义验证  自定义校验\r\n  */\r\n  validatePwd = (rule, value, callback) => {\r\n    console.log('validatePwd()', rule, value)\r\n    if(!value) {\r\n      callback('密码必须输入')\r\n    } else if (value.length<4) {\r\n      callback('密码长度不能小于4位')\r\n    } else if (value.length>12) {\r\n      callback('密码长度不能大于12位')\r\n    } else if (!/^[a-zA-Z0-9_]+$/.test(value)) {\r\n      callback('密码必须是英文、数字或下划线组成')\r\n    } else {\r\n      callback() // 验证通过\r\n    }\r\n    // callback('xxxx') // 验证失败, 并指定提示的文本\r\n  }\r\n  render () {\r\n\r\n      //判断用户是否登录 如果用户登录了自动跳转管理界面\r\n      const user=this.props.user\r\n      if(user && user._id){\r\n          // this.props.history.replace('/') 也可以\r\n          return <Redirect to='/home'></Redirect>\r\n      }\r\n      // const errorMsg=this.props.user.errorMsg\r\n\r\n    // 得到具强大功能的form对象\r\n    const form = this.props.form\r\n    const { getFieldDecorator } = form;\r\n    return (\r\n      <div className=\"login\">\r\n        <header className=\"login-header\">\r\n          {/* <img src={logo} alt=\"logo\"/> */}\r\n          <h1>React 商品后台管理系统</h1>\r\n        </header>\r\n        <section className=\"login-content\">\r\n          {/* <div>{errorMsg}</div> */}\r\n          <h2>用户登陆</h2>\r\n          <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n            <Item>\r\n              {\r\n                getFieldDecorator('username', { // 配置对象: 属性名是特定的一些名称\r\n                  // 声明式验证: 直接使用别人定义好的验证规则进行验证\r\n                  rules: [\r\n                    { required: true, whitespace: true, message: '用户名必须输入' },\r\n                    { min: 4, message: '用户名至少4位' },\r\n                    { max: 12, message: '用户名最多12位' },\r\n                    { pattern: /^[a-zA-Z0-9_]+$/, message: '用户名必须是英文、数字或下划线组成' },\r\n                  ],\r\n                  initialValue: 'admin', // 初始值\r\n                })(\r\n                  <Input\r\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    placeholder=\"用户名\"\r\n                  />\r\n                )\r\n              }\r\n            </Item>\r\n            <Form.Item>\r\n              {\r\n                getFieldDecorator('password', {\r\n                  rules: [\r\n                    {\r\n                      validator: this.validatePwd\r\n                    }\r\n                  ]\r\n                })(\r\n                  <Input\r\n                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    type=\"password\"\r\n                    placeholder=\"密码\"\r\n                  />\r\n                )\r\n              }\r\n\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                登陆\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n/*\r\n1. 高阶函数\r\n    1). 一类特别的函数\r\n        a. 接受函数类型的参数\r\n        b. 返回值是函数\r\n    2). 常见\r\n        a. 定时器: setTimeout()/setInterval()\r\n        b. Promise: Promise(() => {}) then(value => {}, reason => {})\r\n        c. 数组遍历相关的方法: forEach()/filter()/map()/reduce()/find()/findIndex()\r\n        d. 函数对象的bind()\r\n        e. Form.create()() / getFieldDecorator()()\r\n    3). 高阶函数更新动态, 更加具有扩展性\r\n\r\n2. 高阶组件\r\n    1). 本质就是一个函数\r\n    2). 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性\r\n    3). 作用: 扩展组件的功能\r\n    4). 高阶组件也是高阶函数: 接收一个组件函数, 返回是一个新的组件函数\r\n */\r\n/*\r\n包装Form组件生成一个新的组件: Form(Login)\r\n新组件会向Form组件传递一个强大的对象属性: form\r\n */\r\nconst WrapLogin = Form.create()(Login)\r\nexport default connect(\r\n  state=>({user:state.user}),\r\n  {login}\r\n)(WrapLogin)\r\n/*\r\n1. 前台表单验证\r\n2. 收集表单输入数据\r\n */\r\n\r\n//async和awais\r\n//1.作用？\r\n//简化promise对象的使用：不再使用then()来指定成功/失败的回调函数  以同步编码（没有回调函数了）方式实现异步流程\r\n\r\n//2.哪里写await\r\n// 在返回promsie的表达式的左侧写await：不想要promsie，想要promsie异步执行成功的value数据\r\n\r\n//3.哪里写async\r\n//在promsie所在的函数前面写async\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}