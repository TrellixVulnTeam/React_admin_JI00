{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"C:\\\\Users\\\\itryl\\\\Desktop\\\\React client\\\\client\\\\src\\\\pages\\\\login\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './login.less';\nimport logo from '../../assets/images/logo.png';\nimport { reqLogin } from '../../api';\nimport memoryUtils from '../../utils/memoryUtils';\nimport storageUtils from '../../utils/storageUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = _Form.Item; // 不能写在import之前\n\n/*\r\n登陆的路由组件\r\n */\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = event => {\n      // 阻止事件的默认行为\n      event.preventDefault(); // 得到form对象\n      // const form = this.props.form\n      // // 获取表单项的输入数据\n      // const values = form.getFieldsValue()\n      // console.log('handleSubmit()', values)\n    };\n\n    this.validatePwd = (rule, value, callback) => {\n      console.log('validatePwd()', rule, value);\n\n      if (!value) {\n        callback('密码必须输入');\n      } else if (value.length < 4) {\n        callback('密码长度不能小于4位');\n      } else if (value.length > 12) {\n        callback('密码长度不能大于12位');\n      } else if (!/^[a-zA-Z0-9_]+$/.test(value)) {\n        callback('密码必须是英文、数字或下划线组成');\n      } else {\n        callback(); // 验证通过\n      } // callback('xxxx') // 验证失败, 并指定提示的文本\n\n    };\n  }\n\n  render() {\n    // 如果用户已经登陆, 自动跳转到管理界面\n    const user = memoryUtils.user;\n\n    if (user && user._id) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 14\n      }, this);\n    } // 得到具强大功能的form对象\n\n\n    const form = this.props.form;\n    const {\n      getFieldDecorator\n    } = form;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"login-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"React\\u9879\\u76EE: \\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"login-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u7528\\u6237\\u767B\\u9646\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Form, {\n          onSubmit: this.handleSubmit,\n          className: \"login-form\",\n          children: [/*#__PURE__*/_jsxDEV(Item, {\n            children: getFieldDecorator('username', {\n              // 配置对象: 属性名是特定的一些名称\n              // 声明式验证: 直接使用别人定义好的验证规则进行验证\n              rules: [{\n                required: true,\n                whitespace: true,\n                message: '用户名必须输入'\n              }, {\n                min: 4,\n                message: '用户名至少4位'\n              }, {\n                max: 12,\n                message: '用户名最多12位'\n              }, {\n                pattern: /^[a-zA-Z0-9_]+$/,\n                message: '用户名必须是英文、数字或下划线组成'\n              }],\n              initialValue: 'admin' // 初始值\n\n            })( /*#__PURE__*/_jsxDEV(_Input, {\n              prefix: /*#__PURE__*/_jsxDEV(_Icon, {\n                type: \"user\",\n                style: {\n                  color: 'rgba(0,0,0,.25)'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 29\n              }, this),\n              placeholder: \"\\u7528\\u6237\\u540D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(_Form.Item, {\n            children: getFieldDecorator('password', {\n              rules: [{\n                validator: this.validatePwd\n              }]\n            })( /*#__PURE__*/_jsxDEV(_Input, {\n              prefix: /*#__PURE__*/_jsxDEV(_Icon, {\n                type: \"lock\",\n                style: {\n                  color: 'rgba(0,0,0,.25)'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 29\n              }, this),\n              type: \"password\",\n              placeholder: \"\\u5BC6\\u7801\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(_Form.Item, {\n            children: /*#__PURE__*/_jsxDEV(_Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              className: \"login-form-button\",\n              children: \"\\u767B\\u9646\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\r\n1. 高阶函数\r\n    1). 一类特别的函数\r\n        a. 接受函数类型的参数\r\n        b. 返回值是函数\r\n    2). 常见\r\n        a. 定时器: setTimeout()/setInterval()\r\n        b. Promise: Promise(() => {}) then(value => {}, reason => {})\r\n        c. 数组遍历相关的方法: forEach()/filter()/map()/reduce()/find()/findIndex()\r\n        d. 函数对象的bind()\r\n        e. Form.create()() / getFieldDecorator()()\r\n    3). 高阶函数更新动态, 更加具有扩展性\r\n\r\n2. 高阶组件\r\n    1). 本质就是一个函数\r\n    2). 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性\r\n    3). 作用: 扩展组件的功能\r\n    4). 高阶组件也是高阶函数: 接收一个组件函数, 返回是一个新的组件函数\r\n */\n\n/*\r\n包装Form组件生成一个新的组件: Form(Login)\r\n新组件会向Form组件传递一个强大的对象属性: form\r\n */\n\n\nconst WrapLogin = _Form.create()(Login);\n\nexport default WrapLogin;\n/*\r\n1. 前台表单验证\r\n2. 收集表单输入数据\r\n */","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/pages/login/index.jsx"],"names":["React","Component","Redirect","logo","reqLogin","memoryUtils","storageUtils","Item","Login","handleSubmit","event","preventDefault","validatePwd","rule","value","callback","console","log","length","test","render","user","_id","form","props","getFieldDecorator","rules","required","whitespace","message","min","max","pattern","initialValue","color","validator","WrapLogin","create"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {\r\n  Form,\r\n  Icon,\r\n  Input,\r\n  Button,\r\n  message\r\n} from 'antd'\r\nimport './login.less'\r\nimport logo from '../../assets/images/logo.png'\r\nimport {reqLogin} from '../../api'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport storageUtils from '../../utils/storageUtils'\r\n\r\n\r\nconst Item = Form.Item // 不能写在import之前\r\n\r\n\r\n/*\r\n登陆的路由组件\r\n */\r\nclass Login extends Component {\r\n\r\n  handleSubmit = (event) => {\r\n\r\n    // 阻止事件的默认行为\r\n    event.preventDefault()\r\n\r\n    \r\n  \r\n    // 得到form对象\r\n    // const form = this.props.form\r\n    // // 获取表单项的输入数据\r\n    // const values = form.getFieldsValue()\r\n    // console.log('handleSubmit()', values)\r\n  }\r\n\r\n  /*\r\n  对密码进行自定义验证\r\n  */\r\n\r\n  validatePwd = (rule, value, callback) => {\r\n    console.log('validatePwd()', rule, value)\r\n    if(!value) {\r\n      callback('密码必须输入')\r\n    } else if (value.length<4) {\r\n      callback('密码长度不能小于4位')\r\n    } else if (value.length>12) {\r\n      callback('密码长度不能大于12位')\r\n    } else if (!/^[a-zA-Z0-9_]+$/.test(value)) {\r\n      callback('密码必须是英文、数字或下划线组成')\r\n    } else {\r\n      callback() // 验证通过\r\n    }\r\n    // callback('xxxx') // 验证失败, 并指定提示的文本\r\n  }\r\n\r\n  render () {\r\n\r\n    // 如果用户已经登陆, 自动跳转到管理界面\r\n    const user = memoryUtils.user\r\n    if(user && user._id) {\r\n      return <Redirect to='/'/>\r\n    }\r\n\r\n    // 得到具强大功能的form对象\r\n    const form = this.props.form\r\n    const { getFieldDecorator } = form;\r\n\r\n    return (\r\n      <div className=\"login\">\r\n        <header className=\"login-header\">\r\n          <img src={logo} alt=\"logo\"/>\r\n          <h1>React项目: 后台管理系统</h1>\r\n        </header>\r\n        <section className=\"login-content\">\r\n          <h2>用户登陆</h2>\r\n          <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n            <Item>\r\n              {\r\n                getFieldDecorator('username', { // 配置对象: 属性名是特定的一些名称\r\n                  // 声明式验证: 直接使用别人定义好的验证规则进行验证\r\n                  rules: [\r\n                    { required: true, whitespace: true, message: '用户名必须输入' },\r\n                    { min: 4, message: '用户名至少4位' },\r\n                    { max: 12, message: '用户名最多12位' },\r\n                    { pattern: /^[a-zA-Z0-9_]+$/, message: '用户名必须是英文、数字或下划线组成' },\r\n                  ],\r\n                  initialValue: 'admin', // 初始值\r\n                })(\r\n                  <Input\r\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    placeholder=\"用户名\"\r\n                  />\r\n                )\r\n              }\r\n            </Item>\r\n            <Form.Item>\r\n              {\r\n                getFieldDecorator('password', {\r\n                  rules: [\r\n                    {\r\n                      validator: this.validatePwd\r\n                    }\r\n                  ]\r\n                })(\r\n                  <Input\r\n                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    type=\"password\"\r\n                    placeholder=\"密码\"\r\n                  />\r\n                )\r\n              }\r\n\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                登陆\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/*\r\n1. 高阶函数\r\n    1). 一类特别的函数\r\n        a. 接受函数类型的参数\r\n        b. 返回值是函数\r\n    2). 常见\r\n        a. 定时器: setTimeout()/setInterval()\r\n        b. Promise: Promise(() => {}) then(value => {}, reason => {})\r\n        c. 数组遍历相关的方法: forEach()/filter()/map()/reduce()/find()/findIndex()\r\n        d. 函数对象的bind()\r\n        e. Form.create()() / getFieldDecorator()()\r\n    3). 高阶函数更新动态, 更加具有扩展性\r\n\r\n2. 高阶组件\r\n    1). 本质就是一个函数\r\n    2). 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性\r\n    3). 作用: 扩展组件的功能\r\n    4). 高阶组件也是高阶函数: 接收一个组件函数, 返回是一个新的组件函数\r\n */\r\n/*\r\n包装Form组件生成一个新的组件: Form(Login)\r\n新组件会向Form组件传递一个强大的对象属性: form\r\n */\r\nconst WrapLogin = Form.create()(Login)\r\nexport default WrapLogin\r\n/*\r\n1. 前台表单验证\r\n2. 收集表单输入数据\r\n */\r\n\r\n"]},"metadata":{},"sourceType":"module"}