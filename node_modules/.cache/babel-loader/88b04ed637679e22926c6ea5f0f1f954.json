{"ast":null,"code":"import \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/tree/style\";\nimport _Tree from \"antd/es/tree\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"C:\\\\Users\\\\itryl\\\\Desktop\\\\React client\\\\client\\\\src\\\\pages\\\\role\\\\auth-form.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport menuList from '../../config/menuConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = _Form.Item;\nconst {\n  TreeNode\n} = _Tree; //添加分类的form组件\n\nexport default class AuthForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getMenus = () => {\n      return this.state.checkedKeys;\n    };\n\n    this.onCheck = (checkedKeys, info) => {\n      this.setState({\n        checkedKeys: checkedKeys\n      }); //重新更新选中的状态\n    };\n\n    this.getTreeNodes = menuList => {\n      return menuList.reduce((pre, item) => {\n        pre.push( /*#__PURE__*/_jsxDEV(TreeNode, {\n          title: item.title,\n          children: item.children ? this.getTreeNodes(item.children) : null\n        }, item.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this));\n        return pre;\n      }, []);\n    };\n\n    const menus = this.props.role.menus; //根据传入角色的menus生成初始状态\n\n    this.state = {\n      checkedKeys: menus //先初始化默认role里面的选中状态 如果后面有选中 重新更新checkedKeys\n\n    };\n  }\n\n  componentWillMount() {\n    //调用生成树形结构的方法\n    this.treeNodes = this.getTreeNodes(menuList);\n  } //根据新传入的role来更新checkedKeys状态(当组件接收到新的属性时自动调用)\n\n\n  componentWillReceiveProps(nextProps) {\n    const menus = nextProps.role.menus;\n    this.setState({\n      menus\n    });\n  }\n\n  render() {\n    const formItemLatout = {\n      labelCol: {\n        span: 4\n      },\n      //左侧label的宽度\n      wrapperCol: {\n        span: 15\n      } //右侧包裹的宽度\n\n    };\n    const {\n      role\n    } = this.props;\n    const {\n      checkedKeys\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Form, {\n      children: [/*#__PURE__*/_jsxDEV(Item, {\n        label: \"\\u89D2\\u8272\\u540D\\u79F0\",\n        ...formItemLatout,\n        children: /*#__PURE__*/_jsxDEV(_Input, {\n          value: role.name,\n          disabled: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(_Tree, {\n        checkable: true,\n        defaultExpandAll: true,\n        checkedKeys: checkedKeys //当前点击行的role的权限   选中状态的数组\n        ,\n        onCheck: this.onCheck //当前分支选中的事件\n        ,\n        children: /*#__PURE__*/_jsxDEV(TreeNode, {\n          title: \"\\u5E73\\u53F0\\u6743\\u9650\",\n          children: this.treeNodes\n        }, \"all\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nAuthForm.propTypes = {\n  role: PropTypes.object //从父组件接收到的role\n\n};","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/pages/role/auth-form.jsx"],"names":["React","Component","PropTypes","menuList","Item","TreeNode","AuthForm","constructor","props","getMenus","state","checkedKeys","onCheck","info","setState","getTreeNodes","reduce","pre","item","push","title","children","key","menus","role","componentWillMount","treeNodes","componentWillReceiveProps","nextProps","render","formItemLatout","labelCol","span","wrapperCol","name","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Input, Form, Tree } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport menuList from '../../config/menuConfig'\r\nconst Item = Form.Item\r\nconst { TreeNode } = Tree;\r\n//添加分类的form组件\r\nexport default class AuthForm extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        const menus=this.props.role.menus     //根据传入角色的menus生成初始状态\r\n        this.state={\r\n            checkedKeys:menus   //先初始化默认role里面的选中状态 如果后面有选中 重新更新checkedKeys\r\n        }\r\n    }\r\n    static propTypes = {\r\n        role: PropTypes.object,   //从父组件接收到的role\r\n    }\r\n    //定义一个方法 给父组件传递收集的信息\r\n    getMenus=()=>{\r\n        return this.state.checkedKeys\r\n    }\r\n\r\n    //树形控件选中时候的回调  cheeckedKetys所有选中时的数组\r\n    onCheck=(checkedKeys, info)=>{   \r\n        this.setState({checkedKeys:checkedKeys})   //重新更新选中的状态\r\n    }\r\n\r\n    //定义生成树形结构的方法\r\n    getTreeNodes=(menuList)=>{\r\n     return menuList.reduce((pre,item)=>{\r\n          pre.push(\r\n            <TreeNode title={item.title} key={item.key} >\r\n                {/* 如果当前的节点有子节点，就继续递归 */}\r\n                {item.children?this.getTreeNodes(item.children):null}  \r\n            </TreeNode>\r\n          )\r\n          return pre\r\n      },[])\r\n    }\r\n\r\n    componentWillMount(){  //调用生成树形结构的方法\r\n        this.treeNodes=this.getTreeNodes(menuList)\r\n    }\r\n\r\n    //根据新传入的role来更新checkedKeys状态(当组件接收到新的属性时自动调用)\r\n    componentWillReceiveProps(nextProps){\r\n        const menus=nextProps.role.menus\r\n        this.setState({menus})\r\n    }\r\n    render() {\r\n        const formItemLatout = {\r\n            labelCol: { span: 4 },  //左侧label的宽度\r\n            wrapperCol: { span: 15 } //右侧包裹的宽度\r\n        }\r\n        const { role } = this.props\r\n        const {checkedKeys}=this.state\r\n        return (\r\n            <Form>\r\n                <Item label='角色名称' {...formItemLatout}>\r\n                    <Input value={role.name} disabled></Input>\r\n                </Item>\r\n                <Tree\r\n                    checkable\r\n                    defaultExpandAll={true}\r\n                    checkedKeys={checkedKeys}   //当前点击行的role的权限   选中状态的数组\r\n                    onCheck={this.onCheck}   //当前分支选中的事件\r\n                > \r\n                    <TreeNode title=\"平台权限\" key=\"all\">\r\n                        {this.treeNodes}\r\n                        {/* <TreeNode title=\"parent 1-0\" key=\"0-0-0\">\r\n                            <TreeNode title=\"leaf\" key=\"0-0-0-0\"  />\r\n                            <TreeNode title=\"leaf\" key=\"0-0-0-1\" />\r\n                        </TreeNode>\r\n                        <TreeNode title=\"parent 1-1\" key=\"0-0-1\">\r\n                            <TreeNode  key=\"0-0-1-0\" />\r\n                        </TreeNode> */}\r\n                    </TreeNode>\r\n                </Tree>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}