{"ast":null,"code":"import \"antd/es/card/style\";\nimport _Card from \"antd/es/card\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/cascader/style\";\nimport _Cascader from \"antd/es/cascader\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"C:\\\\Users\\\\itryl\\\\Desktop\\\\React client\\\\client\\\\src\\\\pages\\\\products\\\\add-update.jsx\";\nimport React, { Component } from 'react';\nimport LinkButton from '../../components/link-button';\nimport { reqCategory, reqCategorys } from '../../api/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = _Form.Item;\nconst {\n  TextArea\n} = _Input; //多行输入框\n//product的添加和更新的子路由组件\n\nclass ProductAddUpdate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      options: []\n    };\n\n    this.initOptions = categorys => {\n      //根据categorys数组生成options数组\n      const options = categorys.map(c => {\n        return {\n          value: c._id,\n          label: c.name,\n          isLeaf: false //不是叶子\n\n        };\n      });\n      this.setState({\n        options\n      });\n    };\n\n    this.getCategorys = async parentId => {\n      const result = await reqCategorys(parentId);\n\n      if (result.status === 0) {\n        const categorys = result.data; //如果一级分类列表\n\n        if (parentId === '0') {\n          this.initOptions(categorys); //利用一级分类数组 调用生成options的数组\n        } else {\n            //二级分类列表\n            return categorys; //返回二级列表  当前async函数返回的promise就会成功且value为categorys\n          }\n      }\n    };\n\n    this.loadData = async selectedOptions => {\n      //得到选择的option对象\n      const targetOption = selectedOptions[0]; // 显示loading效果\n\n      targetOption.loading = true; //根据选中的分类，请求获取二级分类列表subCategorys\n\n      const subCategorys = await this.getCategorys(targetOption.value); //value是一级分类的id\n      // 隐藏loading效果\n\n      targetOption.loading = false;\n\n      if (subCategorys && subCategorys.length > 0) {\n        //当前选中的分类有二级分类\n        //生成一个二级列表的options\n        const cOptions = subCategorys.map(c => {\n          return {\n            value: c._id,\n            label: c.name,\n            isLeaf: true //是叶子\n\n          };\n        }); //关联到当前option上\n\n        targetOption.children = cOptions;\n      } else {\n        //当前选中的分类没有二级分类\n        targetOption.isLeaf = true;\n      }\n\n      this.setState({\n        options: [...this.state.options]\n      });\n    };\n\n    this.validatorPrice = (rule, value, callback) => {\n      //value是字符串类型\n      // callback()  //验证通过\n      // callback('xxxx')   //验证没通过  并且指定错误信息\n      if (value * 1 > 0) {\n        callback(); //验证通过\n      } else {\n        callback('价格必须大于0');\n      }\n    };\n\n    this.submit = () => {\n      //进行整体表单验证，整体通过才提交\n      this.props.form.validateFields((err, value) => {\n        if (!err) {\n          _message.success('添加成功');\n\n          console.log(value);\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getCategorys('0');\n  }\n\n  componentWillMount() {\n    //取出携带的state\n    const product = this.props.location.state; //如果添加没有值 ，否则有值 \n\n    const {\n      pCategoryId,\n      categoryId\n    } = product; //保存一个是否更新的标识\n\n    this.isUpdate = !!product; //保存商品  如果没有就保存一个空对象\n\n    this.product = product || {}; // ||{}空对象防止添加的时候没有值 而报错\n  }\n\n  render() {\n    //取出是否更新的标识\n    const {\n      isUpdate,\n      product\n    } = this; //用来接收级联分类id的数组\n\n    const categoryIds = []; //如果当前是更新\n\n    if (isUpdate) {\n      //商品是一个一级分类的商品\n      if (pCategoryId === '0') {\n        categoryIds.push(categoryId);\n      } else {\n        //商品是一个二级分类的商品\n        categoryIds.push(pCategoryId);\n        categoryIds.push(categoryId);\n      }\n    }\n\n    const title = /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(LinkButton, {\n        onClick: () => {\n          this.props.history.goBack();\n        },\n        children: /*#__PURE__*/_jsxDEV(_Icon, {\n          type: \"arrow-left\",\n          style: {\n            fontSize: 20\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: isUpdate ? '修改商品' : '添加商品'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this); //指定Item布局的配置对象\n\n\n    const formItemLayOut = {\n      labelCol: {\n        span: 2\n      },\n      //左侧label的宽度\n      wrapperCol: {\n        span: 8\n      } //指定右侧包裹的宽度\n\n    }; //输入框最后面的后缀\n\n    const selectAfter = /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u5143\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this); //获取表单验证\n\n\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    return /*#__PURE__*/_jsxDEV(_Card, {\n      title: title,\n      children: /*#__PURE__*/_jsxDEV(_Form, { ...formItemLayOut,\n        children: [/*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u540D\\u79F0\",\n          children: getFieldDecorator('name', {\n            initialValue: product.name,\n            rules: [{\n              required: true,\n              message: '必须输入商品名称'\n            }]\n          })( /*#__PURE__*/_jsxDEV(_Input, {\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u540D\\u79F0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 32\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u63CF\\u8FF0\",\n          children: getFieldDecorator('desc', {\n            initialValue: product.desc,\n            rules: [{\n              required: true,\n              message: '必须输入商品描述'\n            }]\n          })( /*#__PURE__*/_jsxDEV(TextArea, {\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u63CF\\u8FF0\",\n            autosize: {\n              minRows: 2,\n              maxRows: 6\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 32\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u4EF7\\u683C\",\n          children: getFieldDecorator('price', {\n            initialValue: product.price,\n            rules: [{\n              required: true,\n              message: '必须输入商品价格'\n            }, {\n              validator: this.validatorPrice\n            }]\n          })( /*#__PURE__*/_jsxDEV(_Input, {\n            type: \"number\",\n            placeholder: \"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u4EF7\\u683C\",\n            addonAfter: selectAfter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 32\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u5206\\u7C7B\",\n          children: getFieldDecorator('categorysIds', {\n            initialValue: '',\n            rules: [{\n              required: true,\n              message: '必须输入商品分类'\n            }]\n          })( /*#__PURE__*/_jsxDEV(_Cascader, {\n            options: this.state.options //需要显示的列表数据\n            ,\n            loadData: this.loadData //指定当选择某个列表项，加载下一级列表的监听回调\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u56FE\\u7247\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\u5546\\u54C1\\u56FE\\u7247\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          label: \"\\u5546\\u54C1\\u8BE6\\u60C5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\u5546\\u54C1\\u8BE6\\u60C5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          children: /*#__PURE__*/_jsxDEV(_Button, {\n            type: \"primary\",\n            onClick: this.submit,\n            children: \"\\u63D0\\u4EA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _Form.create()(ProductAddUpdate);","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/pages/products/add-update.jsx"],"names":["React","Component","LinkButton","reqCategory","reqCategorys","Item","TextArea","ProductAddUpdate","state","options","initOptions","categorys","map","c","value","_id","label","name","isLeaf","setState","getCategorys","parentId","result","status","data","loadData","selectedOptions","targetOption","loading","subCategorys","length","cOptions","children","validatorPrice","rule","callback","submit","props","form","validateFields","err","success","console","log","componentDidMount","componentWillMount","product","location","pCategoryId","categoryId","isUpdate","render","categoryIds","push","title","history","goBack","fontSize","formItemLayOut","labelCol","span","wrapperCol","selectAfter","getFieldDecorator","initialValue","rules","required","message","desc","minRows","maxRows","price","validator","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Card, Icon, Input, Form, Cascader, Upload, Button, message } from 'antd'\r\nimport LinkButton from '../../components/link-button';\r\nimport { reqCategory, reqCategorys } from '../../api/index'\r\nconst Item = Form.Item\r\nconst { TextArea } = Input;  //多行输入框\r\n//product的添加和更新的子路由组件\r\nclass ProductAddUpdate extends Component {\r\n    state = {\r\n        options: [],\r\n    }\r\n\r\n    //处理一级分类的数组\r\n    initOptions = (categorys) => {\r\n        //根据categorys数组生成options数组\r\n        const options = categorys.map((c) => {\r\n            return {\r\n                value: c._id,\r\n                label: c.name,\r\n                isLeaf: false  //不是叶子\r\n            }\r\n        })\r\n        this.setState({ options })\r\n    }\r\n    //获取一级分类列表 或者二级分类列表  二级分类数组有数据\r\n    getCategorys = async (parentId) => {\r\n        const result = await reqCategorys(parentId)\r\n        if (result.status === 0) {\r\n            const categorys = result.data\r\n            //如果一级分类列表\r\n            if (parentId === '0') {\r\n                this.initOptions(categorys)   //利用一级分类数组 调用生成options的数组\r\n            } else {  //二级分类列表\r\n                return categorys   //返回二级列表  当前async函数返回的promise就会成功且value为categorys\r\n            }\r\n        }\r\n    }\r\n    //用于加载下一级列表数据的回调\r\n    loadData = async selectedOptions => {\r\n        //得到选择的option对象\r\n        const targetOption = selectedOptions[0];\r\n        // 显示loading效果\r\n        targetOption.loading = true;\r\n\r\n        //根据选中的分类，请求获取二级分类列表subCategorys\r\n        const subCategorys = await this.getCategorys(targetOption.value)   //value是一级分类的id\r\n              // 隐藏loading效果\r\n              targetOption.loading = false;\r\n        if (subCategorys && subCategorys.length > 0) {  //当前选中的分类有二级分类\r\n            //生成一个二级列表的options\r\n        const cOptions=subCategorys.map(c=>{\r\n                return {\r\n                    value: c._id,\r\n                    label: c.name,\r\n                    isLeaf: true  //是叶子\r\n                }\r\n            })\r\n            //关联到当前option上\r\n            targetOption.children=cOptions\r\n        } else {  //当前选中的分类没有二级分类\r\n            targetOption.isLeaf=true\r\n        }\r\n        this.setState({\r\n            options: [...this.state.options]\r\n        });\r\n    };\r\n    //验证价格 自定义验证函数\r\n    validatorPrice = (rule, value, callback) => {   //value是字符串类型\r\n        // callback()  //验证通过\r\n        // callback('xxxx')   //验证没通过  并且指定错误信息\r\n        if (value * 1 > 0) {\r\n            callback() //验证通过\r\n        } else {\r\n            callback('价格必须大于0')\r\n        }\r\n    }\r\n    //提交按钮\r\n    submit = () => {\r\n        //进行整体表单验证，整体通过才提交\r\n        this.props.form.validateFields((err, value) => {\r\n            if (!err) {\r\n                message.success('添加成功')\r\n                console.log(value)\r\n            }\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        this.getCategorys('0')\r\n    }\r\n    componentWillMount(){\r\n        //取出携带的state\r\n        const product=this.props.location.state  //如果添加没有值 ，否则有值 \r\n        const {pCategoryId,categoryId}=product\r\n        //保存一个是否更新的标识\r\n        this.isUpdate=!!product\r\n        //保存商品  如果没有就保存一个空对象\r\n        this.product=product||{}  // ||{}空对象防止添加的时候没有值 而报错\r\n    }\r\n    render() {\r\n        //取出是否更新的标识\r\n        const {isUpdate,product} =this\r\n        //用来接收级联分类id的数组\r\n        const categoryIds=[]\r\n        //如果当前是更新\r\n        if(isUpdate){\r\n            //商品是一个一级分类的商品\r\n            if(pCategoryId==='0'){\r\n                categoryIds.push(categoryId)\r\n            }else{  //商品是一个二级分类的商品\r\n                categoryIds.push(pCategoryId)\r\n                categoryIds.push(categoryId)\r\n            }\r\n        }\r\n        const title = (\r\n            <span>\r\n                <LinkButton onClick={()=>{this.props.history.goBack()}}>\r\n                    <Icon type='arrow-left' style={{ fontSize: 20 }}></Icon>\r\n                </LinkButton>\r\n                <span>{isUpdate?'修改商品':'添加商品'}</span>\r\n            </span>\r\n        )\r\n        //指定Item布局的配置对象\r\n        const formItemLayOut = {\r\n            labelCol: { span: 2 },   //左侧label的宽度\r\n            wrapperCol: { span: 8 }   //指定右侧包裹的宽度\r\n        }\r\n        //输入框最后面的后缀\r\n        const selectAfter = (\r\n            <span>元</span>\r\n        );\r\n\r\n        //获取表单验证\r\n        const { getFieldDecorator } = this.props.form\r\n        return (\r\n            <Card\r\n                title={title}\r\n            >\r\n                <Form {...formItemLayOut}>\r\n                    <Item label=\"商品名称\">\r\n                        {\r\n                            getFieldDecorator('name', {\r\n                                initialValue: product.name,\r\n                                rules: [\r\n                                    { required: true, message: '必须输入商品名称' }\r\n                                ]\r\n                            })(<Input placeholder='请输入商品名称'></Input>)\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品描述\">\r\n                        {\r\n                            getFieldDecorator('desc', {\r\n                                initialValue: product.desc,\r\n                                rules: [\r\n                                    { required: true, message: '必须输入商品描述' }\r\n                                ]\r\n                            })(<TextArea placeholder='请输入商品描述' autosize={{ minRows: 2, maxRows: 6 }} ></TextArea>)\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品价格\">\r\n                        {\r\n                            getFieldDecorator('price', {\r\n                                initialValue: product.price,\r\n                                rules: [\r\n                                    { required: true, message: '必须输入商品价格' },\r\n                                    { validator: this.validatorPrice }\r\n                                ]\r\n                            })(<Input type='number' placeholder='请输入商品价格' addonAfter={selectAfter}></Input>)\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品分类\">\r\n                    {\r\n                            getFieldDecorator('categorysIds', {\r\n                                initialValue: '',\r\n                                rules: [\r\n                                    { required: true, message: '必须输入商品分类' },\r\n                                ]\r\n                            })( <Cascader\r\n                                options={this.state.options}    //需要显示的列表数据\r\n                                loadData={this.loadData}        //指定当选择某个列表项，加载下一级列表的监听回调\r\n                            />)\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品图片\">\r\n                        <div>商品图片</div>\r\n                    </Item>\r\n                    <Item label=\"商品详情\">\r\n                        <div>商品详情</div>\r\n                    </Item>\r\n                    <Item >\r\n                        <Button type='primary' onClick={this.submit}>提交</Button>\r\n                    </Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\nexport default Form.create()(ProductAddUpdate)\r\n"]},"metadata":{},"sourceType":"module"}