{"ast":null,"code":"import \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/menu/style\";\nimport _Menu from \"antd/es/menu\";\nvar _jsxFileName = \"C:\\\\Users\\\\itryl\\\\Desktop\\\\React client\\\\client\\\\src\\\\components\\\\left-nav\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport logo from '../../assets/images/logo.png';\nimport menuList from '../../config/menuConfig';\nimport './index.less';\nimport { setHeadTitle } from '../../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SubMenu = _Menu.SubMenu;\n/*\r\n左侧导航的组件\r\n */\n\nclass LeftNav extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.hasAuth = item => {\n      const {\n        key,\n        isPublic\n      } = item;\n      const menus = this.props.user.role.menus;\n      const username = this.props.user.username;\n      /*\r\n      1. 如果当前用户是admin\r\n      2. 如果当前item是公开的\r\n      3. 当前用户有此item的权限: key有没有menus中\r\n       */\n\n      if (username === 'admin' || isPublic || menus.indexOf(key) !== -1) {\n        return true;\n      } else if (item.children) {\n        // 4. 如果当前用户有此item的某个子item的权限\n        return !!item.children.find(child => menus.indexOf(child.key) !== -1);\n      }\n\n      return false;\n    };\n\n    this.getMenuNodes_map = menuList => {\n      return menuList.map(item => {\n        /*\r\n          {\r\n            title: '首页', // 菜单标题名称\r\n            key: '/home', // 对应的path\r\n            icon: 'home', // 图标名称\r\n            children: [], // 可能有, 也可能没有\r\n          }\r\n            <Menu.Item key=\"/home\">\r\n            <Link to='/home'>\r\n              <Icon type=\"pie-chart\"/>\r\n              <span>首页</span>\r\n            </Link>\r\n          </Menu.Item>\r\n            <SubMenu\r\n            key=\"sub1\"\r\n            title={\r\n              <span>\r\n                <Icon type=\"mail\"/>\r\n                <span>商品</span>\r\n              </span>\r\n            }\r\n          >\r\n            <Menu.Item/>\r\n            <Menu.Item/>\r\n          </SubMenu>\r\n        */\n        if (!item.children) {\n          return /*#__PURE__*/_jsxDEV(_Menu.Item, {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: item.key,\n              children: [/*#__PURE__*/_jsxDEV(_Icon, {\n                type: item.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 13\n            }, this)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(SubMenu, {\n            title: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(_Icon, {\n                type: item.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this),\n            children: this.getMenuNodes(item.children)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this);\n        }\n      });\n    };\n\n    this.getMenuNodes = menuList => {\n      // 得到当前请求的路由路径\n      const path = this.props.location.pathname;\n      return menuList.reduce((pre, item) => {\n        // 如果当前用户有item对应的权限, 才需要显示对应的菜单项\n        if (this.hasAuth(item)) {\n          // 向pre添加<Menu.Item>\n          if (!item.children) {\n            // 判断item是否是当前对应的item\n            if (item.key === path || path.indexOf(item.key) === 0) {\n              // 更新redux中的headerTitle状态\n              this.props.setHeadTitle(item.title);\n            }\n\n            pre.push( /*#__PURE__*/_jsxDEV(_Menu.Item, {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: item.key,\n                onClick: () => this.props.setHeadTitle(item.title),\n                children: [/*#__PURE__*/_jsxDEV(_Icon, {\n                  type: item.icon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 15\n              }, this)\n            }, item.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 13\n            }, this));\n          } else {\n            // 查找一个与当前请求路径匹配的子Item\n            const cItem = item.children.find(cItem => path.indexOf(cItem.key) === 0); // 如果存在, 说明当前item的子列表需要打开\n\n            if (cItem) {\n              this.openKey = item.key;\n            } // 向pre添加<SubMenu>\n\n\n            pre.push( /*#__PURE__*/_jsxDEV(SubMenu, {\n              title: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [/*#__PURE__*/_jsxDEV(_Icon, {\n                  type: item.icon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 17\n              }, this),\n              children: this.getMenuNodes(item.children)\n            }, item.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 13\n            }, this));\n          }\n        }\n\n        return pre;\n      }, []);\n    };\n  }\n\n  /*\r\n  在第一次render()之前执行一次\r\n  为第一个render()准备数据(必须同步的)\r\n   */\n  componentWillMount() {\n    this.menuNodes = this.getMenuNodes(menuList);\n  }\n\n  render() {\n    // debugger\n    // 得到当前请求的路由路径\n    let path = this.props.location.pathname;\n    console.log('render()', path);\n\n    if (path.indexOf('/product') === 0) {\n      // 当前请求的是商品或其子路由界面\n      path = '/product';\n    } // 得到需要打开菜单项的key\n\n\n    const openKey = this.openKey;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-nav\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"left-nav-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u7845\\u8C37\\u540E\\u53F0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Menu, {\n        mode: \"inline\",\n        theme: \"dark\",\n        selectedKeys: [path],\n        defaultOpenKeys: [openKey],\n        children: this.menuNodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*\r\nwithRouter高阶组件:\r\n包装非路由组件, 返回一个新的组件\r\n新的组件向非路由组件传递3个属性: history/location/match\r\n */\n\n\nexport default connect(state => ({\n  user: state.user\n}), {\n  setHeadTitle\n})(withRouter(LeftNav));","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/components/left-nav/index.jsx"],"names":["React","Component","Link","withRouter","connect","logo","menuList","setHeadTitle","SubMenu","LeftNav","hasAuth","item","key","isPublic","menus","props","user","role","username","indexOf","children","find","child","getMenuNodes_map","map","icon","title","getMenuNodes","path","location","pathname","reduce","pre","push","cItem","openKey","componentWillMount","menuNodes","render","console","log","state"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {Link, withRouter} from 'react-router-dom'\r\nimport {Menu, Icon} from 'antd'\r\nimport {connect} from 'react-redux'\r\n\r\nimport logo from '../../assets/images/logo.png'\r\nimport menuList from '../../config/menuConfig'\r\nimport './index.less'\r\nimport {setHeadTitle} from '../../redux/actions'\r\n\r\nconst SubMenu = Menu.SubMenu;\r\n\r\n/*\r\n左侧导航的组件\r\n */\r\nclass LeftNav extends Component {\r\n\r\n  /*\r\n  判断当前登陆用户对item是否有权限\r\n   */\r\n  hasAuth = (item) => {\r\n    const {key, isPublic} = item\r\n\r\n    const menus = this.props.user.role.menus\r\n    const username = this.props.user.username\r\n    /*\r\n    1. 如果当前用户是admin\r\n    2. 如果当前item是公开的\r\n    3. 当前用户有此item的权限: key有没有menus中\r\n     */\r\n    if(username==='admin' || isPublic || menus.indexOf(key)!==-1) {\r\n      return true\r\n    } else if(item.children){ // 4. 如果当前用户有此item的某个子item的权限\r\n      return !!item.children.find(child =>  menus.indexOf(child.key)!==-1)\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /*\r\n  根据menu的数据数组生成对应的标签数组\r\n  使用map() + 递归调用\r\n  */\r\n  getMenuNodes_map = (menuList) => {\r\n    return menuList.map(item => {\r\n      /*\r\n        {\r\n          title: '首页', // 菜单标题名称\r\n          key: '/home', // 对应的path\r\n          icon: 'home', // 图标名称\r\n          children: [], // 可能有, 也可能没有\r\n        }\r\n\r\n        <Menu.Item key=\"/home\">\r\n          <Link to='/home'>\r\n            <Icon type=\"pie-chart\"/>\r\n            <span>首页</span>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <SubMenu\r\n          key=\"sub1\"\r\n          title={\r\n            <span>\r\n              <Icon type=\"mail\"/>\r\n              <span>商品</span>\r\n            </span>\r\n          }\r\n        >\r\n          <Menu.Item/>\r\n          <Menu.Item/>\r\n        </SubMenu>\r\n      */\r\n      if(!item.children) {\r\n        return (\r\n          <Menu.Item key={item.key}>\r\n            <Link to={item.key}>\r\n              <Icon type={item.icon}/>\r\n              <span>{item.title}</span>\r\n            </Link>\r\n          </Menu.Item>\r\n        )\r\n      } else {\r\n        return (\r\n          <SubMenu\r\n            key={item.key}\r\n            title={\r\n              <span>\r\n              <Icon type={item.icon}/>\r\n              <span>{item.title}</span>\r\n            </span>\r\n            }\r\n          >\r\n            {this.getMenuNodes(item.children)}\r\n          </SubMenu>\r\n        )\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  /*\r\n  根据menu的数据数组生成对应的标签数组\r\n  使用reduce() + 递归调用\r\n  */\r\n  getMenuNodes = (menuList) => {\r\n    // 得到当前请求的路由路径\r\n    const path = this.props.location.pathname\r\n\r\n    return menuList.reduce((pre, item) => {\r\n\r\n      // 如果当前用户有item对应的权限, 才需要显示对应的菜单项\r\n      if (this.hasAuth(item)) {\r\n\r\n\r\n        // 向pre添加<Menu.Item>\r\n        if(!item.children) {\r\n          // 判断item是否是当前对应的item\r\n          if (item.key===path || path.indexOf(item.key)===0) {\r\n            // 更新redux中的headerTitle状态\r\n            this.props.setHeadTitle(item.title)\r\n          }\r\n\r\n          pre.push((\r\n            <Menu.Item key={item.key}>\r\n              <Link to={item.key} onClick={() => this.props.setHeadTitle(item.title)}>\r\n                <Icon type={item.icon}/>\r\n                <span>{item.title}</span>\r\n              </Link>\r\n            </Menu.Item>\r\n          ))\r\n        } else {\r\n          // 查找一个与当前请求路径匹配的子Item\r\n          const cItem = item.children.find(cItem => path.indexOf(cItem.key)===0)\r\n          // 如果存在, 说明当前item的子列表需要打开\r\n          if (cItem) {\r\n            this.openKey = item.key\r\n          }\r\n\r\n\r\n          // 向pre添加<SubMenu>\r\n          pre.push((\r\n            <SubMenu\r\n              key={item.key}\r\n              title={\r\n                <span>\r\n              <Icon type={item.icon}/>\r\n              <span>{item.title}</span>\r\n            </span>\r\n              }\r\n            >\r\n              {this.getMenuNodes(item.children)}\r\n            </SubMenu>\r\n          ))\r\n        }\r\n      }\r\n\r\n      return pre\r\n    }, [])\r\n  }\r\n\r\n  /*\r\n  在第一次render()之前执行一次\r\n  为第一个render()准备数据(必须同步的)\r\n   */\r\n  componentWillMount () {\r\n    this.menuNodes = this.getMenuNodes(menuList)\r\n  }\r\n\r\n  render() {\r\n    // debugger\r\n    // 得到当前请求的路由路径\r\n    let path = this.props.location.pathname\r\n    console.log('render()', path)\r\n    if(path.indexOf('/product')===0) { // 当前请求的是商品或其子路由界面\r\n      path = '/product'\r\n    }\r\n\r\n    // 得到需要打开菜单项的key\r\n    const openKey = this.openKey\r\n\r\n    return (\r\n      <div className=\"left-nav\">\r\n        <Link to='/' className=\"left-nav-header\">\r\n          <img src={logo} alt=\"logo\"/>\r\n          <h1>硅谷后台</h1>\r\n        </Link>\r\n\r\n        <Menu\r\n          mode=\"inline\"\r\n          theme=\"dark\"\r\n          selectedKeys={[path]}\r\n          defaultOpenKeys={[openKey]}\r\n        >\r\n\r\n          {\r\n            this.menuNodes\r\n          }\r\n\r\n        </Menu>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/*\r\nwithRouter高阶组件:\r\n包装非路由组件, 返回一个新的组件\r\n新的组件向非路由组件传递3个属性: history/location/match\r\n */\r\nexport default connect(\r\n  state => ({user: state.user}),\r\n  {setHeadTitle}\r\n)(withRouter(LeftNav))"]},"metadata":{},"sourceType":"module"}