{"ast":null,"code":"import\"antd/es/card/style\";import _Card from\"antd/es/card\";import _objectSpread from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import\"antd/es/button/style\";import _Button from\"antd/es/button\";import\"antd/es/cascader/style\";import _Cascader from\"antd/es/cascader\";import\"antd/es/icon/style\";import _Icon from\"antd/es/icon\";import\"antd/es/message/style\";import _message from\"antd/es/message\";import _toConsumableArray from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import\"antd/es/input/style\";import _Input from\"antd/es/input\";import\"antd/es/form/style\";import _Form from\"antd/es/form\";import React,{Component}from'react';import LinkButton from'../../components/link-button';import{reqCategorys,reqAddProductOrUpdateProduct}from'../../api/index';import PictureWall from'./pictures-wall';import RichTextEditor from'./rich-test-editor';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Item=_Form.Item;var TextArea=_Input.TextArea;//多行输入框\n//product的添加和更新的子路由组件\nvar ProductAddUpdate=/*#__PURE__*/function(_Component){_inherits(ProductAddUpdate,_Component);var _super=_createSuper(ProductAddUpdate);function ProductAddUpdate(props){var _this;_classCallCheck(this,ProductAddUpdate);_this=_super.call(this,props);//创建用来保存ref标识的标签对象的容器\n_this.state={options:[]};_this.initOptions=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(categorys){var options,_assertThisInitialize,isUpdate,product,pCategoryId,subCategorys,childOptions,targetOption;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://根据categorys数组生成options数组\noptions=categorys.map(function(c){return{value:c._id,label:c.name,isLeaf:false//不是叶子\n};});//如果是一个二级分类商品的更新\n_assertThisInitialize=_assertThisInitialized(_this),isUpdate=_assertThisInitialize.isUpdate,product=_assertThisInitialize.product;pCategoryId=product.pCategoryId;if(!(isUpdate&&pCategoryId!=='0')){_context.next=10;break;}_context.next=6;return _this.getCategorys(pCategoryId);case 6:subCategorys=_context.sent;//生成二级下拉列表的options\nchildOptions=subCategorys.map(function(c){return{value:c._id,label:c.name,isLeaf:true};});//找到当前商品对应的一级option对象\ntargetOption=options.find(function(option){return option.value===pCategoryId;});//关联到对应的一届options上\ntargetOption.children=childOptions;case 10://更新状态\n_this.setState({options:options});case 11:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.getCategorys=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(parentId){var result,categorys;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return reqCategorys(parentId);case 2:result=_context2.sent;if(!(result.status===0)){_context2.next=10;break;}categorys=result.data;//如果一级分类列表\nif(!(parentId==='0')){_context2.next=9;break;}_this.initOptions(categorys);//利用一级分类数组 调用生成options的数组\n_context2.next=10;break;case 9:return _context2.abrupt(\"return\",categorys);case 10:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();_this.loadData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(selectedOptions){var targetOption,subCategorys,cOptions;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0://得到选择的option对象\ntargetOption=selectedOptions[0];// 显示loading效果\ntargetOption.loading=true;//根据选中的分类，请求获取二级分类列表subCategorys\n_context3.next=4;return _this.getCategorys(targetOption.value);case 4:subCategorys=_context3.sent;//value是一级分类的id\n// 隐藏loading效果\ntargetOption.loading=false;if(subCategorys&&subCategorys.length>0){//当前选中的分类有二级分类\n//生成一个二级列表的options\ncOptions=subCategorys.map(function(c){return{value:c._id,label:c.name,isLeaf:true//是叶子\n};});//关联到当前option上\ntargetOption.children=cOptions;}else{//当前选中的分类没有二级分类\ntargetOption.isLeaf=true;}_this.setState({options:_toConsumableArray(_this.state.options)//内部修改，必须解构赋值 否则监听不到 不会重新render\n});case 8:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();_this.validatorPrice=function(rule,value,callback){//value是字符串类型\n// callback()  //验证通过\n// callback('xxxx')   //验证没通过  并且指定错误信息\nif(value*1>0){callback();//验证通过\n}else{callback('价格必须大于0');}};_this.submit=function(){// 进行表单验证, 如果通过了, 才发送请求\n_this.props.form.validateFields(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(error,values){var name,desc,price,categoryIds,pCategoryId,categoryId,imgs,detail,product,result;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(error){_context4.next=11;break;}// 1. 收集数据, 并封装成product对象\nname=values.name,desc=values.desc,price=values.price,categoryIds=values.categoryIds;if(categoryIds.length===1){pCategoryId='0';categoryId=categoryIds[0];}else{pCategoryId=categoryIds[0];categoryId=categoryIds[1];}imgs=_this.pw.current.getImgs();detail=_this.editor.current.getDetail();product={name:name,desc:desc,price:price,imgs:imgs,detail:detail,pCategoryId:pCategoryId,categoryId:categoryId};// 如果是更新, 需要添加_id\nif(_this.isUpdate){product._id=_this.product._id;}// 2. 调用接口请求函数去添加/更新\n_context4.next=9;return reqAddProductOrUpdateProduct(product);case 9:result=_context4.sent;// 3. 根据结果提示\nif(result.status===0){_message.success(\"\".concat(_this.isUpdate?'更新':'添加',\"\\u5546\\u54C1\\u6210\\u529F!\"));_this.props.history.goBack();}else{_message.error(\"\".concat(_this.isUpdate?'更新':'添加',\"\\u5546\\u54C1\\u5931\\u8D25!\"));}case 11:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4,_x5){return _ref4.apply(this,arguments);};}());};_this.pw=/*#__PURE__*/React.createRef();_this.editor=/*#__PURE__*/React.createRef();return _this;}//处理一级分类的数组\n_createClass(ProductAddUpdate,[{key:\"componentDidMount\",value:function componentDidMount(){this.getCategorys('0');}},{key:\"componentWillMount\",value:function componentWillMount(){//取出携带的state\nvar product=this.props.location.state;//如果添加没有值 ，否则有值 \n//保存一个是否更新的标识\nthis.isUpdate=!!product;//保存商品  如果没有就保存一个空对象\nthis.product=product||{};// ||{}空对象防止添加的时候没有值 而报错\n}},{key:\"render\",value:function render(){var _this2=this;//取出是否更新的标识\nvar isUpdate=this.isUpdate,product=this.product;var pCategoryId=product.pCategoryId,categoryId=product.categoryId,imgs=product.imgs,detail=product.detail;// console.log(pCategoryId,categoryId)\n//用来接收级联分类id的数组\nvar categoryIds=[];//如果当前是更新\nif(isUpdate){//商品是一个一级分类的商品\nif(pCategoryId==='0'){categoryIds.push(categoryId);// console.log(categoryIds,1111111111)\n}else{//商品是一个二级分类的商品\ncategoryIds.push(pCategoryId);categoryIds.push(categoryId);}}var title=/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(LinkButton,{onClick:function onClick(){_this2.props.history.goBack();},children:/*#__PURE__*/_jsx(_Icon,{type:\"arrow-left\",style:{fontSize:20}})}),/*#__PURE__*/_jsx(\"span\",{children:isUpdate?'修改商品':'添加商品'})]});//指定Item布局的配置对象\nvar formItemLayOut={labelCol:{span:2},//左侧label的宽度\nwrapperCol:{span:8}//指定右侧包裹的宽度\n};//输入框最后面的后缀\nvar selectAfter=/*#__PURE__*/_jsx(\"span\",{children:\"\\u5143\"});//获取表单验证\nvar getFieldDecorator=this.props.form.getFieldDecorator;return/*#__PURE__*/_jsx(_Card,{title:title,children:/*#__PURE__*/_jsxs(_Form,_objectSpread(_objectSpread({},formItemLayOut),{},{children:[/*#__PURE__*/_jsx(Item,{label:\"\\u5546\\u54C1\\u540D\\u79F0\",children:getFieldDecorator('name',{initialValue:product.name,rules:[{required:true,message:'必须输入商品名称'}]})(/*#__PURE__*/_jsx(_Input,{placeholder:\"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u540D\\u79F0\"}))}),/*#__PURE__*/_jsx(Item,{label:\"\\u5546\\u54C1\\u63CF\\u8FF0\",children:getFieldDecorator('desc',{initialValue:product.desc,rules:[{required:true,message:'必须输入商品描述'}]})(/*#__PURE__*/_jsx(TextArea,{placeholder:\"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u63CF\\u8FF0\",autosize:{minRows:2,maxRows:6}}))}),/*#__PURE__*/_jsx(Item,{label:\"\\u5546\\u54C1\\u4EF7\\u683C\",children:getFieldDecorator('price',{initialValue:product.price,rules:[{required:true,message:'必须输入商品价格'},{validator:this.validatorPrice}]})(/*#__PURE__*/_jsx(_Input,{type:\"number\",placeholder:\"\\u8BF7\\u8F93\\u5165\\u5546\\u54C1\\u4EF7\\u683C\",addonAfter:selectAfter}))}),/*#__PURE__*/_jsx(Item,{label:\"\\u5546\\u54C1\\u5206\\u7C7B\",children:getFieldDecorator('categoryIds',{initialValue:categoryIds,rules:[{required:true,message:'必须输入商品分类'}]})(/*#__PURE__*/_jsx(_Cascader,{placeholder:\"\\u8BF7\\u6307\\u5B9A\\u5546\\u54C1\\u5206\\u7C7B\",options:this.state.options//需要显示的列表数据\n,loadData:this.loadData//指定当选择某个列表项，加载下一级列表的监听回调\n}))}),/*#__PURE__*/_jsx(Item,{label:\"\\u5546\\u54C1\\u56FE\\u7247\",children:/*#__PURE__*/_jsx(PictureWall,{ref:this.pw,imgs:imgs})}),/*#__PURE__*/_jsx(Item,{label:\"\\u5546\\u54C1\\u8BE6\\u60C5\",children:/*#__PURE__*/_jsx(RichTextEditor,{ref:this.editor,detail:detail})}),/*#__PURE__*/_jsx(Item,{children:/*#__PURE__*/_jsx(_Button,{type:\"primary\",onClick:this.submit,children:\"\\u63D0\\u4EA4\"})})]}))});}}]);return ProductAddUpdate;}(Component);export default _Form.create()(ProductAddUpdate);","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/pages/products/add-update.jsx"],"names":["React","Component","LinkButton","reqCategorys","reqAddProductOrUpdateProduct","PictureWall","RichTextEditor","Item","TextArea","ProductAddUpdate","props","state","options","initOptions","categorys","map","c","value","_id","label","name","isLeaf","isUpdate","product","pCategoryId","getCategorys","subCategorys","childOptions","targetOption","find","option","children","setState","parentId","result","status","data","loadData","selectedOptions","loading","length","cOptions","validatorPrice","rule","callback","submit","form","validateFields","error","values","desc","price","categoryIds","categoryId","imgs","pw","current","getImgs","detail","editor","getDetail","success","history","goBack","createRef","location","push","title","fontSize","formItemLayOut","labelCol","span","wrapperCol","selectAfter","getFieldDecorator","initialValue","rules","required","message","minRows","maxRows","validator","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Card, Icon, Input, Form, Cascader, Button, message } from 'antd'\r\nimport LinkButton from '../../components/link-button';\r\nimport {  reqCategorys,reqAddProductOrUpdateProduct } from '../../api/index'\r\nimport PictureWall from './pictures-wall'\r\nimport RichTextEditor from './rich-test-editor'\r\nconst Item = Form.Item\r\nconst { TextArea } = Input;  //多行输入框\r\n//product的添加和更新的子路由组件\r\nclass ProductAddUpdate extends Component {\r\n    state = {\r\n        options: [],\r\n    }\r\n    constructor(props){\r\n        super(props)\r\n        //创建用来保存ref标识的标签对象的容器\r\n        this.pw=React.createRef()\r\n        this.editor=React.createRef()\r\n    }\r\n    //处理一级分类的数组\r\n    initOptions =async(categorys) => {\r\n        //根据categorys数组生成options数组\r\n        const options = categorys.map((c) => {\r\n            return {\r\n                value: c._id,\r\n                label: c.name,\r\n                isLeaf: false  //不是叶子\r\n            }\r\n        })\r\n        //如果是一个二级分类商品的更新\r\n        const {isUpdate,product}=this\r\n        const {pCategoryId} =product\r\n        if(isUpdate&&pCategoryId!=='0'){\r\n            //获取对应的二级分类列表\r\n          const subCategorys=await  this.getCategorys(pCategoryId)\r\n          //生成二级下拉列表的options\r\n          const childOptions=subCategorys.map(c=>({\r\n                value:c._id,\r\n                label:c.name,\r\n                isLeaf:true\r\n          }))\r\n        //找到当前商品对应的一级option对象\r\n        const targetOption=options.find((option)=>option.value===pCategoryId)\r\n        //关联到对应的一届options上\r\n        targetOption.children=childOptions\r\n    }\r\n      //更新状态\r\n      this.setState({options})\r\n}\r\n    //获取一级分类列表 或者二级分类列表  二级分类数组有数据\r\n    getCategorys = async (parentId) => {\r\n        const result = await reqCategorys(parentId)\r\n        if (result.status === 0) {\r\n            const categorys = result.data\r\n            //如果一级分类列表\r\n            if (parentId === '0') {\r\n                this.initOptions(categorys)   //利用一级分类数组 调用生成options的数组\r\n            } else {  //二级分类列表\r\n                return categorys   //返回二级列表  当前async函数返回的promise就会成功且value为categorys\r\n            }\r\n        }\r\n    }\r\n    //用于加载下一级列表数据的回调\r\n    loadData = async selectedOptions => {\r\n        //得到选择的option对象\r\n        const targetOption = selectedOptions[0];\r\n        // 显示loading效果\r\n        targetOption.loading = true;\r\n\r\n        //根据选中的分类，请求获取二级分类列表subCategorys\r\n        const subCategorys = await this.getCategorys(targetOption.value)   //value是一级分类的id\r\n              // 隐藏loading效果\r\n              targetOption.loading = false;\r\n        if (subCategorys && subCategorys.length > 0) {  //当前选中的分类有二级分类\r\n            //生成一个二级列表的options\r\n        const cOptions=subCategorys.map(c=>{\r\n                return {\r\n                    value: c._id,\r\n                    label: c.name,\r\n                    isLeaf: true  //是叶子\r\n                }\r\n            })\r\n            //关联到当前option上\r\n            targetOption.children=cOptions\r\n        } else {  //当前选中的分类没有二级分类\r\n            targetOption.isLeaf=true\r\n        }\r\n        this.setState({\r\n            options: [...this.state.options]   //内部修改，必须解构赋值 否则监听不到 不会重新render\r\n        });\r\n    };\r\n    //验证价格 自定义验证函数\r\n    validatorPrice = (rule, value, callback) => {   //value是字符串类型\r\n        // callback()  //验证通过\r\n        // callback('xxxx')   //验证没通过  并且指定错误信息\r\n        if (value * 1 > 0) {\r\n            callback() //验证通过\r\n        } else {\r\n            callback('价格必须大于0')\r\n        }\r\n    }\r\n    //提交按钮\r\n    submit = () => {\r\n        // 进行表单验证, 如果通过了, 才发送请求\r\n        this.props.form.validateFields(async (error, values) => {\r\n          if (!error) {\r\n    \r\n            // 1. 收集数据, 并封装成product对象\r\n            const {name, desc, price, categoryIds} = values\r\n            let pCategoryId, categoryId\r\n            if (categoryIds.length===1) {\r\n              pCategoryId = '0'\r\n              categoryId = categoryIds[0]\r\n            } else {\r\n              pCategoryId = categoryIds[0]\r\n              categoryId = categoryIds[1]\r\n            }\r\n            const imgs = this.pw.current.getImgs()\r\n            const detail = this.editor.current.getDetail()\r\n    \r\n            const product = {name, desc, price, imgs, detail, pCategoryId, categoryId}\r\n    \r\n            // 如果是更新, 需要添加_id\r\n            if(this.isUpdate) {\r\n              product._id = this.product._id\r\n            }\r\n    \r\n            // 2. 调用接口请求函数去添加/更新\r\n            const result = await reqAddProductOrUpdateProduct(product)\r\n    \r\n            // 3. 根据结果提示\r\n            if (result.status===0) {\r\n              message.success(`${this.isUpdate ? '更新' : '添加'}商品成功!`)\r\n              this.props.history.goBack()\r\n            } else {\r\n              message.error(`${this.isUpdate ? '更新' : '添加'}商品失败!`)\r\n            }\r\n          }\r\n        })\r\n      }\r\n    componentDidMount() {\r\n        this.getCategorys('0')\r\n    }\r\n    componentWillMount(){\r\n        //取出携带的state\r\n        const product=this.props.location.state  //如果添加没有值 ，否则有值 \r\n        //保存一个是否更新的标识\r\n        this.isUpdate=!!product\r\n        //保存商品  如果没有就保存一个空对象\r\n        this.product=product||{}  // ||{}空对象防止添加的时候没有值 而报错\r\n    }\r\n    render() {\r\n        //取出是否更新的标识\r\n        const {isUpdate,product} =this\r\n        const {pCategoryId,categoryId,imgs,detail}=product\r\n        // console.log(pCategoryId,categoryId)\r\n        //用来接收级联分类id的数组\r\n        const categoryIds=[]\r\n        //如果当前是更新\r\n        if(isUpdate){\r\n            //商品是一个一级分类的商品\r\n            if(pCategoryId==='0'){\r\n                categoryIds.push(categoryId)\r\n                // console.log(categoryIds,1111111111)\r\n            }else{  //商品是一个二级分类的商品\r\n                categoryIds.push(pCategoryId)\r\n                categoryIds.push(categoryId)\r\n            }\r\n        }\r\n        const title = (\r\n            <span>\r\n                <LinkButton onClick={()=>{this.props.history.goBack()}}>\r\n                    <Icon type='arrow-left' style={{ fontSize: 20 }}></Icon>\r\n                </LinkButton>\r\n                <span>{isUpdate?'修改商品':'添加商品'}</span>\r\n            </span>\r\n        )\r\n        //指定Item布局的配置对象\r\n        const formItemLayOut = {\r\n            labelCol: { span: 2 },   //左侧label的宽度\r\n            wrapperCol: { span: 8 }   //指定右侧包裹的宽度\r\n        }\r\n        //输入框最后面的后缀\r\n        const selectAfter = (\r\n            <span>元</span>\r\n        );\r\n\r\n        //获取表单验证\r\n        const { getFieldDecorator } = this.props.form\r\n        return (\r\n            <Card\r\n                title={title}\r\n            >\r\n                <Form {...formItemLayOut}>\r\n                    <Item label=\"商品名称\">\r\n                        {\r\n                            getFieldDecorator('name', {\r\n                                initialValue: product.name,\r\n                                rules: [\r\n                                    { required: true, message: '必须输入商品名称' }\r\n                                ]\r\n                            })(<Input placeholder='请输入商品名称'></Input>)\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品描述\">\r\n                        {\r\n                            getFieldDecorator('desc', {\r\n                                initialValue: product.desc,\r\n                                rules: [\r\n                                    { required: true, message: '必须输入商品描述' }\r\n                                ]\r\n                            })(<TextArea placeholder='请输入商品描述' autosize={{ minRows: 2, maxRows: 6 }} ></TextArea>)\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品价格\">\r\n                        {\r\n                            getFieldDecorator('price', {\r\n                                initialValue: product.price,\r\n                                rules: [\r\n                                    { required: true, message: '必须输入商品价格' },\r\n                                    { validator: this.validatorPrice }\r\n                                ]\r\n                            })(<Input type='number' placeholder='请输入商品价格' addonAfter={selectAfter}></Input>)\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品分类\">\r\n                    {\r\n                            getFieldDecorator('categoryIds', {\r\n                                initialValue: categoryIds,\r\n                                rules: [\r\n                                    { required: true, message: '必须输入商品分类' },\r\n                                ]\r\n                            })( <Cascader\r\n                            placeholder='请指定商品分类'\r\n                                options={this.state.options}    //需要显示的列表数据\r\n                                loadData={this.loadData}        //指定当选择某个列表项，加载下一级列表的监听回调\r\n                            />)\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品图片\">\r\n                        <PictureWall ref={this.pw} imgs={imgs}></PictureWall>\r\n                    </Item>\r\n                    <Item label=\"商品详情\">\r\n                       <RichTextEditor ref={this.editor} detail={detail}></RichTextEditor>\r\n                    </Item>\r\n                    <Item >\r\n                        <Button type='primary' onClick={this.submit}>提交</Button>\r\n                    </Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\nexport default Form.create()(ProductAddUpdate)\r\n"]},"metadata":{},"sourceType":"module"}