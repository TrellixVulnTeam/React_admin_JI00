{"ast":null,"code":"import \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/menu/style\";\nimport _Menu from \"antd/es/menu\";\nvar _jsxFileName = \"C:\\\\Users\\\\itryl\\\\Desktop\\\\React client\\\\client\\\\src\\\\components\\\\left-nav\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport './index.less';\nimport logo from '../../assets/images/n.jpg';\nimport { Link, withRouter } from 'react-router-dom';\nimport menuList from '../../config/menuConfig.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SubMenu = _Menu.SubMenu;\n\nclass LeftNav extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getMenuNodes = menuList => {\n      //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\n      const path = this.props.location.pathname;\n      return menuList.reduce((pre, item) => {\n        //向pre 添加<Menu.Item/>\n        //向pre 添加<SubMneu />\n        if (!item.children) {\n          pre.push( /*#__PURE__*/_jsxDEV(_Menu.Item, {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: item.key,\n              children: [/*#__PURE__*/_jsxDEV(_Icon, {\n                type: item.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, this)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 28\n          }, this));\n        } else {\n          //查找一个与当前请求路径匹配的自Item\n          const cItem = item.children.find(cItem => cItem.key === path); //如果存在，说明当前item的列表需要打开\n\n          this.openKey = item.key;\n          pre.push( /*#__PURE__*/_jsxDEV(SubMenu, {\n            title: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(_Icon, {\n                type: item.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 23\n            }, this),\n            children: this.getMenuNodes(item.children)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this));\n        }\n\n        return pre;\n      }, []);\n    };\n  }\n\n  render() {\n    //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\n    const path = this.props.location.pathname;\n    console.log('render()', path); //得到需要打开菜单项的key\n\n    const openKey = this.openKey;\n    console('openKey', openKey);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"left-nav\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"left-nav-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"logo\",\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"\\u5546\\u54C1\\u540E\\u53F0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(_Menu, {\n        selectedKeys: [path] //指定哪一个菜单选中 根据对应的路径 这个是动态的\n        ,\n        defaultOpenKeys: [path] //指定展开哪一个菜单\n        ,\n        mode: \"inline\" //    主题色\n        ,\n        theme: \"dark\",\n        children: this.getMenuNodes(menuList)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n\n} //withRouter高阶组件\n//包装非路由组件 产生一个新的路由组件\n//新的组件向非路由组件传递3个属性：history/location/match\n\n\nexport default _c = withRouter(LeftNav); //将一般组件拥有路由组件的属性\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/components/left-nav/index.jsx"],"names":["React","Component","logo","Link","withRouter","menuList","SubMenu","LeftNav","getMenuNodes","path","props","location","pathname","reduce","pre","item","children","push","key","icon","title","cItem","find","openKey","render","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './index.less'\r\nimport logo from '../../assets/images/n.jpg'\r\nimport {Link,withRouter} from 'react-router-dom'\r\nimport { Menu, Icon} from 'antd';\r\nimport menuList from '../../config/menuConfig.js'\r\n\r\nconst SubMenu = Menu.SubMenu;\r\n class LeftNav extends Component {\r\n\r\n    //根据menu数组生成对应的标签数组   map+递归调用\r\n  /*   getMenuNodes=(menuList)=>{\r\n        return menuList.map((item)=>{\r\n                //    {\r\n                //         title:'商品',  菜单标题名称\r\n                //         key:'/products',\r\n                //         icon:'appstore',\r\n                //         children:[       //子菜单列表  可能有 可能没有\r\n                //   } \r\n               if(!item.children){\r\n                   return (\r\n                          <Menu.Item key={item.key}>\r\n                            <Link to={item.key}>\r\n                            <Icon type={item.icon} />\r\n                            <span>{item.title}</span>\r\n                            </Link>\r\n                        </Menu.Item>\r\n                   )\r\n               }else{\r\n                   return (\r\n                    <SubMenu\r\n                    key={item.key}\r\n                    title={\r\n                      <span>\r\n                        <Icon type={item.icon}/>\r\n                        <span>{item.title}</span>\r\n                      </span>\r\n                    }\r\n                  >\r\n                  {\r\n                      this.getMenuNodes(item.children)\r\n                  }\r\n                  </SubMenu> \r\n                   )\r\n               }\r\n            }\r\n        )\r\n    } */\r\n     //根据menu数组生成对应的标签数组   reduce+递归调用\r\n    getMenuNodes=((menuList)=>{\r\n               //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\r\n       const path=this.props.location.pathname\r\n        return menuList.reduce(((pre,item)=>{\r\n            //向pre 添加<Menu.Item/>\r\n            //向pre 添加<SubMneu />\r\n            if(!item.children){\r\n                pre.push(( <Menu.Item key={item.key}>\r\n                    <Link to={item.key}>\r\n                    <Icon type={item.icon} />\r\n                    <span>{item.title}</span>\r\n                    </Link>\r\n                </Menu.Item>))\r\n            }else{\r\n                //查找一个与当前请求路径匹配的自Item\r\n                const cItem=item.children.find(cItem=>cItem.key===path)\r\n                //如果存在，说明当前item的列表需要打开\r\n                this.openKey=item.key\r\n                pre.push((\r\n                    <SubMenu\r\n                    key={item.key}\r\n                    title={\r\n                      <span>\r\n                        <Icon type={item.icon}/>\r\n                        <span>{item.title}</span>\r\n                      </span>\r\n                    }\r\n                  >\r\n                  {\r\n                      this.getMenuNodes(item.children)\r\n                  }\r\n                  </SubMenu> \r\n                ))\r\n            }\r\n                return pre\r\n        }),[])\r\n    })\r\n    render() {\r\n            //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\r\n       const path=this.props.location.pathname\r\n       console.log('render()',path)\r\n            //得到需要打开菜单项的key\r\n           const openKey=this.openKey\r\n           console('openKey',openKey)\r\n        return (\r\n           <div>\r\n             <header className=\"left-nav\">\r\n                <Link  to='/' className='left-nav-header'>\r\n                    <img alt='logo' src={logo}></img>\r\n                    <h1>商品后台</h1>\r\n                </Link>\r\n            </header>\r\n\r\n            <Menu\r\n        selectedKeys={[path]}  //指定哪一个菜单选中 根据对应的路径 这个是动态的\r\n        defaultOpenKeys={[path]}  //指定展开哪一个菜单\r\n          mode=\"inline\"\r\n        //    主题色\r\n          theme=\"dark\" >     \r\n            {\r\n                this.getMenuNodes(menuList)\r\n            }\r\n        </Menu>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n//withRouter高阶组件\r\n//包装非路由组件 产生一个新的路由组件\r\n//新的组件向非路由组件传递3个属性：history/location/match\r\nexport default withRouter(LeftNav)   //将一般组件拥有路由组件的属性\r\n"]},"metadata":{},"sourceType":"module"}