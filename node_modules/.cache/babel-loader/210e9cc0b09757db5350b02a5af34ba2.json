{"ast":null,"code":"import \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/menu/style\";\nimport _Menu from \"antd/es/menu\";\nvar _jsxFileName = \"C:\\\\Users\\\\itryl\\\\Desktop\\\\React client\\\\client\\\\src\\\\components\\\\left-nav\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport './index.less';\nimport logo from '../../assets/images/n.jpg';\nimport { Link, withRouter } from 'react-router-dom';\nimport menuList from '../../config/menuConfig.js';\nimport memoryUtils from '../../utils/memoryUtils';\nimport { setHead } from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SubMenu = _Menu.SubMenu;\n\nclass LeftNav extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.hasAuth = item => {\n      const {\n        key,\n        isPublic\n      } = item; //key是权限路径  isPublic是否为公开权限\n\n      const menus = memoryUtils.user.role.menus; //当前登录人的权限\n\n      const username = memoryUtils.user.username; //1.如果当前用户是admin\n\n      if (username === 'admin' || isPublic || menus.indexOf(key) !== -1) {\n        return true;\n      } else if (item.children) {\n        //4.如果当前用户有此item的某个子item的权限\n        return !!item.children.find(child => menus.indexOf(child.key) !== -1);\n      }\n\n      return false; //2.如果当前item是公开的\n      //3.当前用户由此item的权限：key有没有在menus中\n    };\n\n    this.getMenuNodes = menuList => {\n      //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\n      const path = this.props.location.pathname;\n      return menuList.reduce((pre, item) => {\n        //如果当前用户有item对应的权限,需要添加显示对应的菜单项\n        if (this.hasAuth(item)) {\n          //向pre 添加<Menu.Item/>\n          //向pre 添加<SubMneu />\n          if (!item.children) {\n            pre.push( /*#__PURE__*/_jsxDEV(_Menu.Item, {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: item.key,\n                onClick: item => {\n                  this.props.headTitle(item.name);\n                },\n                children: [/*#__PURE__*/_jsxDEV(_Icon, {\n                  type: item.icon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this)\n            }, item.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 26\n            }, this));\n          } else {\n            //查找一个与当前请求路径匹配的自Item\n            const cItem = item.children.find(cItem => path.indexOf(cItem.key) === 0); //如果存在，说明当前item的列表需要打开\n\n            if (cItem) {\n              this.openKey = item.key;\n            }\n\n            pre.push( /*#__PURE__*/_jsxDEV(SubMenu, {\n              title: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [/*#__PURE__*/_jsxDEV(_Icon, {\n                  type: item.icon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this),\n              children: this.getMenuNodes(item.children)\n            }, item.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this));\n          }\n        }\n\n        return pre;\n      }, []);\n    };\n  }\n\n  //在第一次render()之前执行一次 为第一次render()准备数据(同步的)\n  componentWillMount() {\n    this.menuNodes = this.getMenuNodes(menuList);\n  }\n\n  render() {\n    //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\n    let path = this.props.location.pathname; //    console.log('render()',path)\n\n    if (path.indexOf('/product') === 0) {\n      //当前请求的是商品或其子路由界面\n      path = '/product';\n    } //得到需要打开菜单项的key\n\n\n    const openKey = this.openKey; //    console.log('openKey',openKey)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"left-nav\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"left-nav-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"logo\",\n            src: logo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"\\u5546\\u54C1\\u540E\\u53F0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(_Menu, {\n        selectedKeys: [path] //指定哪一个菜单选中 根据对应的路径 这个是动态的\n        ,\n        defaultOpenKeys: [openKey] //指定展开哪一个菜单\n        ,\n        mode: \"inline\" //    主题色\n        ,\n        theme: \"dark\",\n        children: this.menuNodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 12\n    }, this);\n  }\n\n} //withRouter高阶组件\n//包装非路由组件 产生一个新的路由组件\n//新的组件向非路由组件传递3个属性：history/location/match\n\n\nexport default connect(state => ({\n  headTitle: state.headTitle\n}), {\n  setHead\n})(withRouter(LeftNav)); //将一般组件拥有路由组件的属性","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/components/left-nav/index.jsx"],"names":["React","Component","logo","Link","withRouter","menuList","memoryUtils","setHead","connect","SubMenu","LeftNav","hasAuth","item","key","isPublic","menus","user","role","username","indexOf","children","find","child","getMenuNodes","path","props","location","pathname","reduce","pre","push","headTitle","name","icon","title","cItem","openKey","componentWillMount","menuNodes","render","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './index.less'\r\nimport logo from '../../assets/images/n.jpg'\r\nimport {Link,withRouter} from 'react-router-dom'\r\nimport { Menu, Icon} from 'antd';\r\nimport menuList from '../../config/menuConfig.js'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport {setHead} from '../../redux/actions'\r\nimport {connect} from 'react-redux'\r\nconst SubMenu = Menu.SubMenu;\r\n class LeftNav extends Component {\r\n   //判断当前登录用户对item是否有权限\r\n  hasAuth=(item)=>{\r\n    const {key,isPublic}=item  //key是权限路径  isPublic是否为公开权限\r\n     const menus=memoryUtils.user.role.menus  //当前登录人的权限\r\n    const username=memoryUtils.user.username\r\n    //1.如果当前用户是admin\r\n    if(username==='admin'||isPublic||menus.indexOf(key)!==-1){\r\n        return true\r\n    }else if(item.children){ //4.如果当前用户有此item的某个子item的权限\r\n       return  !!item.children.find((child)=>menus.indexOf(child.key)!==-1)\r\n    } \r\n    return false\r\n    //2.如果当前item是公开的\r\n    //3.当前用户由此item的权限：key有没有在menus中\r\n  }\r\n    //根据menu数组生成对应的标签数组   map+递归调用\r\n  /*   getMenuNodes=(menuList)=>{\r\n        return menuList.map((item)=>{\r\n                //    {\r\n                //         title:'商品',  菜单标题名称\r\n                //         key:'/products',\r\n                //         icon:'appstore',\r\n                //         children:[       //子菜单列表  可能有 可能没有\r\n                //   } \r\n               if(!item.children){\r\n                   return (\r\n                          <Menu.Item key={item.key}>\r\n                            <Link to={item.key}>\r\n                            <Icon type={item.icon} />\r\n                            <span>{item.title}</span>\r\n                            </Link>\r\n                        </Menu.Item>\r\n                   )\r\n               }else{\r\n                   return (\r\n                    <SubMenu\r\n                    key={item.key}\r\n                    title={\r\n                      <span>\r\n                        <Icon type={item.icon}/>\r\n                        <span>{item.title}</span>\r\n                      </span>\r\n                    }\r\n                  >\r\n                  {\r\n                      this.getMenuNodes(item.children)\r\n                  }\r\n                  </SubMenu> \r\n                   )\r\n               }\r\n            }\r\n        )\r\n    } */\r\n     //根据menu数组生成对应的标签数组   reduce+递归调用\r\n    getMenuNodes=((menuList)=>{\r\n               //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\r\n       const path=this.props.location.pathname\r\n        return menuList.reduce(((pre,item)=>{\r\n          //如果当前用户有item对应的权限,需要添加显示对应的菜单项\r\n          if(this.hasAuth(item)){\r\n                //向pre 添加<Menu.Item/>\r\n            //向pre 添加<SubMneu />\r\n            if(!item.children){\r\n              pre.push(( <Menu.Item key={item.key}>\r\n                  <Link to={item.key} onClick={(item)=>{this.props.headTitle(item.name)}}>\r\n                  <Icon type={item.icon} />\r\n                  <span>{item.title}</span>\r\n                  </Link>\r\n              </Menu.Item>))\r\n          }else{\r\n              //查找一个与当前请求路径匹配的自Item\r\n              const cItem=item.children.find(cItem=>path.indexOf(cItem.key)===0)\r\n              //如果存在，说明当前item的列表需要打开\r\n             if(cItem){\r\n              this.openKey=item.key\r\n             }\r\n              pre.push((\r\n                  <SubMenu\r\n                  key={item.key} \r\n                  title={\r\n                    <span>\r\n                      <Icon type={item.icon}/>\r\n                      <span>{item.title}</span>\r\n                    </span>\r\n                  }\r\n                >\r\n                {\r\n                    this.getMenuNodes(item.children)\r\n                }\r\n                </SubMenu> \r\n              ))\r\n          }\r\n          }\r\n                return pre\r\n        }),[])\r\n    })\r\n    //在第一次render()之前执行一次 为第一次render()准备数据(同步的)\r\n    componentWillMount(){\r\n        this.menuNodes= this.getMenuNodes(menuList)\r\n    }\r\n    render() {\r\n            //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\r\n       let  path=this.props.location.pathname\r\n    //    console.log('render()',path)\r\n    if(path.indexOf('/product')===0){  //当前请求的是商品或其子路由界面\r\n          path='/product'\r\n    }\r\n            //得到需要打开菜单项的key\r\n           const openKey=this.openKey\r\n        //    console.log('openKey',openKey)\r\n        return (\r\n           <div>\r\n             <header className=\"left-nav\">\r\n                <Link  to='/' className='left-nav-header'>\r\n                    <img alt='logo' src={logo}></img>\r\n                    <h1>商品后台</h1>\r\n                </Link>\r\n            </header>\r\n\r\n            <Menu\r\n        selectedKeys={[path]}  //指定哪一个菜单选中 根据对应的路径 这个是动态的\r\n        defaultOpenKeys={[openKey]}  //指定展开哪一个菜单\r\n          mode=\"inline\"\r\n        //    主题色\r\n          theme=\"dark\" >     \r\n            {\r\n              this.menuNodes\r\n            }\r\n        </Menu>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n//withRouter高阶组件\r\n//包装非路由组件 产生一个新的路由组件\r\n//新的组件向非路由组件传递3个属性：history/location/match\r\nexport default connect(\r\n    state=>({headTitle:state.headTitle}),\r\n    {setHead}\r\n)(withRouter(LeftNav))   //将一般组件拥有路由组件的属性\r\n"]},"metadata":{},"sourceType":"module"}