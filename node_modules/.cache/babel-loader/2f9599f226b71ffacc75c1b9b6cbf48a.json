{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\itryl\\\\Desktop\\\\React client\\\\client\\\\src\\\\pages\\\\products\\\\rich-test-editor.jsx\";\n\n/*\r\n用来指定商品详情的富文本编辑器组件\r\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class RichTextEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty() // 创建一个没有内容的编辑对象\n\n    };\n\n    this.onEditorStateChange = editorState => {\n      // console.log('onEditorStateChange()')\n      this.setState({\n        editorState\n      });\n    };\n\n    this.getDetail = () => {\n      // 返回输入数据对应的html格式的文本\n      return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()));\n    };\n\n    this.uploadImageCallBack = file => {\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', '/manage/img/upload');\n        const data = new FormData();\n        data.append('image', file);\n        xhr.send(data);\n        xhr.addEventListener('load', () => {\n          const response = JSON.parse(xhr.responseText);\n          const url = response.data.url; // 得到图片的url\n\n          resolve({\n            data: {\n              link: url\n            }\n          });\n        });\n        xhr.addEventListener('error', () => {\n          const error = JSON.parse(xhr.responseText);\n          reject(error);\n        });\n      });\n    };\n\n    const html = this.props.detail;\n\n    if (html) {\n      // 如果有值, 根据html格式字符串创建一个对应的编辑对象\n      const contentBlock = htmlToDraft(html);\n      const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      const editorState = EditorState.createWithContent(contentState);\n      this.state = {\n        editorState\n      };\n    } else {\n      this.state = {\n        editorState: EditorState.createEmpty() // 创建一个没有内容的编辑对象\n\n      };\n    }\n  }\n  /*\r\n  输入过程中实时的回调\r\n   */\n\n\n  render() {\n    const {\n      editorState\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      editorStyle: {\n        border: '1px solid black',\n        minHeight: 200,\n        paddingLeft: 10\n      },\n      onEditorStateChange: this.onEditorStateChange,\n      toolbar: {\n        image: {\n          uploadCallback: this.uploadImageCallBack,\n          alt: {\n            present: true,\n            mandatory: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nRichTextEditor.propTypes = {\n  detail: PropTypes.string //接受传过来的商品详情\n\n};","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/pages/products/rich-test-editor.jsx"],"names":["React","Component","PropTypes","EditorState","convertToRaw","ContentState","Editor","draftToHtml","htmlToDraft","RichTextEditor","constructor","props","state","editorState","createEmpty","onEditorStateChange","setState","getDetail","getCurrentContent","uploadImageCallBack","file","Promise","resolve","reject","xhr","XMLHttpRequest","open","data","FormData","append","send","addEventListener","response","JSON","parse","responseText","url","link","error","html","detail","contentBlock","contentState","createFromBlockArray","contentBlocks","createWithContent","render","border","minHeight","paddingLeft","image","uploadCallback","alt","present","mandatory","propTypes","string"],"mappings":"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","sourcesContent":["/*\r\n用来指定商品详情的富文本编辑器组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {EditorState, convertToRaw, ContentState} from 'draft-js'\r\nimport {Editor} from 'react-draft-wysiwyg'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\n\r\n\r\nexport default class RichTextEditor extends Component {\r\n  \r\n  static propTypes = {\r\n    detail: PropTypes.string  //接受传过来的商品详情\r\n  }\r\n  \r\n  state = {\r\n    editorState: EditorState.createEmpty(), // 创建一个没有内容的编辑对象\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    const html = this.props.detail\r\n    if (html) { // 如果有值, 根据html格式字符串创建一个对应的编辑对象\r\n      const contentBlock = htmlToDraft(html)\r\n      const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks)\r\n      const editorState = EditorState.createWithContent(contentState)\r\n      this.state = {\r\n        editorState,\r\n      }\r\n    } else {\r\n      this.state = {\r\n        editorState: EditorState.createEmpty(), // 创建一个没有内容的编辑对象\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /*\r\n  输入过程中实时的回调\r\n   */\r\n  onEditorStateChange = (editorState) => {\r\n    // console.log('onEditorStateChange()')\r\n    this.setState({\r\n      editorState,\r\n    })\r\n  }\r\n\r\n  getDetail = () => {\r\n    // 返回输入数据对应的html格式的文本\r\n    return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()))\r\n  }\r\n\r\n  uploadImageCallBack = (file) => {\r\n    return new Promise(\r\n      (resolve, reject) => {\r\n        const xhr = new XMLHttpRequest()\r\n        xhr.open('POST', '/manage/img/upload')\r\n        const data = new FormData()\r\n        data.append('image', file)\r\n        xhr.send(data)\r\n        xhr.addEventListener('load', () => {\r\n          const response = JSON.parse(xhr.responseText)\r\n          const url = response.data.url // 得到图片的url\r\n          resolve({data: {link: url}})\r\n        })\r\n        xhr.addEventListener('error', () => {\r\n          const error = JSON.parse(xhr.responseText)\r\n          reject(error)\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const {editorState} = this.state\r\n    return (\r\n      <Editor\r\n        editorState={editorState}\r\n        editorStyle={{border: '1px solid black', minHeight: 200, paddingLeft: 10}}\r\n        onEditorStateChange={this.onEditorStateChange}\r\n        toolbar={{\r\n          image: { uploadCallback: this.uploadImageCallBack, alt: { present: true, mandatory: true } },\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}