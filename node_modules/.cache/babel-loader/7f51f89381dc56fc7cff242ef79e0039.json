{"ast":null,"code":"import\"antd/es/icon/style\";import _Icon from\"antd/es/icon\";import _classCallCheck from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import\"antd/es/menu/style\";import _Menu from\"antd/es/menu\";import React,{Component}from'react';import'./index.less';import logo from'../../assets/images/n.jpg';import{Link,withRouter}from'react-router-dom';import menuList from'../../config/menuConfig.js';// import memoryUtils from '../../utils/memoryUtils'\nimport{setHeadTitle}from'../../redux/actions';import{connect}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SubMenu=_Menu.SubMenu;var LeftNav=/*#__PURE__*/function(_Component){_inherits(LeftNav,_Component);var _super=_createSuper(LeftNav);function LeftNav(){var _this;_classCallCheck(this,LeftNav);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.hasAuth=function(item){var key=item.key,isPublic=item.isPublic;//key是权限路径  isPublic是否为公开权限\nvar menus=_this.props.user.role.menus;//当前登录人的权限\nvar username=_this.props.user.username;//1.如果当前用户是admin\nif(username==='admin'||isPublic||menus.indexOf(key)!==-1){return true;}else if(item.children){//4.如果当前用户有此item的某个子item的权限\nreturn!!item.children.find(function(child){return menus.indexOf(child.key)!==-1;});}return false;//2.如果当前item是公开的\n//3.当前用户由此item的权限：key有没有在menus中\n};_this.getMenuNodes=function(menuList){// console.log(this.props.headTitle,this.prop)\n//得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\nvar path=_this.props.location.pathname;return menuList.reduce(function(pre,item){//如果当前用户有item对应的权限,需要添加显示对应的菜单项\nif(_this.hasAuth(item)){//向pre 添加<Menu.Item/>\n//向pre 添加<SubMneu />\nif(!item.children){//判断item是否为当前对应的item\nif(item.key===path||path.indexOf(item.key)===0){//更新redux中headerTitld的状态\n_this.props.setHeadTitle(item.title);}pre.push(/*#__PURE__*/_jsx(_Menu.Item,{children:/*#__PURE__*/_jsxs(Link,{to:item.key,onClick:function onClick(){return _this.props.setHeadTitle(item.title);},children:[/*#__PURE__*/_jsx(_Icon,{type:item.icon}),/*#__PURE__*/_jsx(\"span\",{children:item.title})]})},item.key));}else{//查找一个与当前请求路径匹配的自Item\nvar cItem=item.children.find(function(cItem){return path.indexOf(cItem.key)===0;});//如果存在，说明当前item的列表需要打开\nif(cItem){_this.openKey=item.key;}pre.push(/*#__PURE__*/_jsx(SubMenu,{title:/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(_Icon,{type:item.icon}),/*#__PURE__*/_jsx(\"span\",{children:item.title})]}),children:_this.getMenuNodes(item.children)},item.key));}}return pre;},[]);};return _this;}_createClass(LeftNav,[{key:\"componentWillMount\",value://在第一次render()之前执行一次 为第一次render()准备数据(同步的)\nfunction componentWillMount(){this.menuNodes=this.getMenuNodes(menuList);}},{key:\"render\",value:function render(){//得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\nvar path=this.props.location.pathname;//    console.log('render()',path)\nif(path.indexOf('/product')===0){//当前请求的是商品或其子路由界面\npath='/product';}//得到需要打开菜单项的key\nvar openKey=this.openKey;//    console.log('openKey',openKey)\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"header\",{className:\"left-nav\",children:/*#__PURE__*/_jsxs(Link,{to:\"/\",className:\"left-nav-header\",children:[/*#__PURE__*/_jsx(\"img\",{alt:\"logo\",src:logo}),/*#__PURE__*/_jsx(\"h1\",{children:\"\\u5546\\u54C1\\u540E\\u53F0\"})]})}),/*#__PURE__*/_jsx(_Menu,{selectedKeys:[path]//指定哪一个菜单选中 根据对应的路径 这个是动态的\n,defaultOpenKeys:[openKey]//指定展开哪一个菜单\n,mode:\"inline\"//    主题色\n,theme:\"dark\",children:this.menuNodes})]});}}]);return LeftNav;}(Component);//withRouter高阶组件\n//包装非路由组件 产生一个新的路由组件\n//新的组件向非路由组件传递3个属性：history/location/match\nexport default connect(function(state){return{user:state.user};},{setHeadTitle:setHeadTitle})(withRouter(LeftNav));//将一般组件拥有路由组件的属性","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/components/left-nav/index.jsx"],"names":["React","Component","logo","Link","withRouter","menuList","setHeadTitle","connect","SubMenu","LeftNav","hasAuth","item","key","isPublic","menus","props","user","role","username","indexOf","children","find","child","getMenuNodes","path","location","pathname","reduce","pre","title","push","icon","cItem","openKey","menuNodes","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './index.less'\r\nimport logo from '../../assets/images/n.jpg'\r\nimport {Link,withRouter} from 'react-router-dom'\r\nimport { Menu, Icon} from 'antd';\r\nimport menuList from '../../config/menuConfig.js'\r\n// import memoryUtils from '../../utils/memoryUtils'\r\nimport {setHeadTitle} from '../../redux/actions'\r\nimport {connect} from 'react-redux'\r\nconst SubMenu = Menu.SubMenu;\r\n class LeftNav extends Component {\r\n   //判断当前登录用户对item是否有权限\r\n  hasAuth=(item)=>{\r\n    const {key,isPublic}=item  //key是权限路径  isPublic是否为公开权限\r\n     const menus=this.props.user.role.menus  //当前登录人的权限\r\n    const username=this.props.user.username\r\n    //1.如果当前用户是admin\r\n    if(username==='admin'||isPublic||menus.indexOf(key)!==-1){\r\n        return true\r\n    }else if(item.children){ //4.如果当前用户有此item的某个子item的权限\r\n       return  !!item.children.find((child)=>menus.indexOf(child.key)!==-1)\r\n    } \r\n    return false\r\n    //2.如果当前item是公开的\r\n    //3.当前用户由此item的权限：key有没有在menus中\r\n  }\r\n    //根据menu数组生成对应的标签数组   map+递归调用\r\n  /*   getMenuNodes=(menuList)=>{\r\n        return menuList.map((item)=>{\r\n                //    {\r\n                //         title:'商品',  菜单标题名称\r\n                //         key:'/products',\r\n                //         icon:'appstore',\r\n                //         children:[       //子菜单列表  可能有 可能没有\r\n                //   } \r\n               if(!item.children){\r\n                   return (\r\n                          <Menu.Item key={item.key}>\r\n                            <Link to={item.key}>\r\n                            <Icon type={item.icon} />\r\n                            <span>{item.title}</span>\r\n                            </Link>\r\n                        </Menu.Item>\r\n                   )\r\n               }else{\r\n                   return (\r\n                    <SubMenu\r\n                    key={item.key}\r\n                    title={\r\n                      <span>\r\n                        <Icon type={item.icon}/>\r\n                        <span>{item.title}</span>\r\n                      </span>\r\n                    }\r\n                  >\r\n                  {\r\n                      this.getMenuNodes(item.children)\r\n                  }\r\n                  </SubMenu> \r\n                   )\r\n               }\r\n            }\r\n        )\r\n    } */\r\n     //根据menu数组生成对应的标签数组   reduce+递归调用\r\n    getMenuNodes=((menuList)=>{\r\n      // console.log(this.props.headTitle,this.prop)\r\n               //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\r\n       const path=this.props.location.pathname\r\n        return menuList.reduce(((pre,item)=>{\r\n          //如果当前用户有item对应的权限,需要添加显示对应的菜单项\r\n          if(this.hasAuth(item)){\r\n                //向pre 添加<Menu.Item/>\r\n            //向pre 添加<SubMneu />\r\n            if(!item.children){\r\n              //判断item是否为当前对应的item\r\n              if(item.key===path||path.indexOf(item.key)===0){\r\n                //更新redux中headerTitld的状态\r\n                this.props.setHeadTitle(item.title)\r\n              }\r\n              pre.push(( <Menu.Item key={item.key}>\r\n                {/* 利用redux的方法 disptach重而改变redux中state的值 */}\r\n                  <Link to={item.key} onClick={()=>this.props.setHeadTitle(item.title)}> \r\n                  <Icon type={item.icon} />\r\n                  <span>{item.title}</span>\r\n                  </Link>\r\n              </Menu.Item>))\r\n          }else{\r\n              //查找一个与当前请求路径匹配的自Item\r\n              const cItem=item.children.find(cItem=>path.indexOf(cItem.key)===0)\r\n              //如果存在，说明当前item的列表需要打开\r\n             if(cItem){\r\n              this.openKey=item.key\r\n             }\r\n              pre.push((\r\n                  <SubMenu\r\n                  key={item.key} \r\n                  title={\r\n                    <span>\r\n                      <Icon type={item.icon}/>\r\n                      <span>{item.title}</span>\r\n                    </span>\r\n                  }\r\n                >\r\n                {\r\n                    this.getMenuNodes(item.children)\r\n                }\r\n                </SubMenu> \r\n              ))\r\n          }\r\n          }\r\n                return pre\r\n        }),[])\r\n    })\r\n    //在第一次render()之前执行一次 为第一次render()准备数据(同步的)\r\n    componentWillMount(){\r\n        this.menuNodes= this.getMenuNodes(menuList)\r\n    }\r\n    render() {\r\n            //得到当前请求的路由路径  但是left-nav不是路由组件 没有location属性  用withRouter将一般组件拥有路由组件的属性\r\n       let  path=this.props.location.pathname\r\n    //    console.log('render()',path)\r\n    if(path.indexOf('/product')===0){  //当前请求的是商品或其子路由界面\r\n          path='/product'\r\n    }\r\n            //得到需要打开菜单项的key\r\n           const openKey=this.openKey\r\n        //    console.log('openKey',openKey)\r\n        return (\r\n           <div>\r\n             <header className=\"left-nav\">\r\n                <Link  to='/' className='left-nav-header'>\r\n                    <img alt='logo' src={logo}></img>\r\n                    <h1>商品后台</h1>\r\n                </Link>\r\n            </header>\r\n\r\n            <Menu\r\n        selectedKeys={[path]}  //指定哪一个菜单选中 根据对应的路径 这个是动态的\r\n        defaultOpenKeys={[openKey]}  //指定展开哪一个菜单\r\n          mode=\"inline\"\r\n        //    主题色\r\n          theme=\"dark\" >     \r\n            {\r\n              this.menuNodes\r\n            }\r\n        </Menu>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n//withRouter高阶组件\r\n//包装非路由组件 产生一个新的路由组件\r\n//新的组件向非路由组件传递3个属性：history/location/match\r\nexport default connect(\r\n    state=>({user:state.user}),\r\n    {setHeadTitle}\r\n)(withRouter(LeftNav))   //将一般组件拥有路由组件的属性\r\n"]},"metadata":{},"sourceType":"module"}