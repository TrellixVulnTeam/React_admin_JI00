{"ast":null,"code":"//包含n个actions_creator函数的模块\n//同步action 对象{type:'xxx',data:数据值}\n//异步action 函数dispatch=>{}\n//设置头部标题的同步action\nimport { SET_HEAD_TITLE, RECEIVE_USER, SHOW_ERROR_MSG, RESET_USER } from './action-types';\nimport { reqLogin } from '../api/index';\nimport storageUtils from '../utils/storageUtils';\nexport const setHeadTitle = headTitle => ({\n  type: SET_HEAD_TITLE,\n  data: headTitle\n}); //接收用户的同步action\n\nexport const receiveUser = user => ({\n  type: RECEIVE_USER,\n  user\n}); //显示错误信息的同步action\n\nexport const showErrMsg = errorMsg => ({\n  type: SHOW_ERROR_MSG,\n  errorMsg\n}); //退出登录的同步action\n\nexport const logout = () => {\n  //删除local中的user\n  storageUtils.removeUser(); //返回action对象\n\n  return {\n    type: RESET_USER\n  };\n}; //登录的异步action\n\nexport const login = (username, password) => {\n  return async dispatch => {\n    //1.执行异步ajax请求\n    const result = await reqLogin(username, password); //{status:0,data:user}  {status:1,msg:'xxxx'}\n    //2.如果成功，分发成功的同步action\n\n    if (result.status === 0) {\n      const user = result.data; //保存local中\n\n      storageUtils.saveUser(user); //分发接收用户的同步action\n\n      dispatch(receiveUser(user));\n    } //3.如果失败，分发失败的同步action\n    else {\n        const msg = result.msg;\n        dispatch(showErrMsg(msg));\n      }\n  };\n};","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/redux/actions.js"],"names":["SET_HEAD_TITLE","RECEIVE_USER","SHOW_ERROR_MSG","RESET_USER","reqLogin","storageUtils","setHeadTitle","headTitle","type","data","receiveUser","user","showErrMsg","errorMsg","logout","removeUser","login","username","password","dispatch","result","status","saveUser","msg"],"mappings":"AAAA;AACA;AAEA;AAEA;AACA,SAAQA,cAAR,EAAuBC,YAAvB,EAAoCC,cAApC,EAAoDC,UAApD,QAAqE,gBAArE;AACA,SAAQC,QAAR,QAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAO,MAAMC,YAAY,GAAEC,SAAD,KAAc;AAACC,EAAAA,IAAI,EAACR,cAAN;AAAqBS,EAAAA,IAAI,EAACF;AAA1B,CAAd,CAAnB,C,CAGP;;AACA,OAAO,MAAMG,WAAW,GAAEC,IAAD,KAAS;AAACH,EAAAA,IAAI,EAACP,YAAN;AAAmBU,EAAAA;AAAnB,CAAT,CAAlB,C,CACP;;AACA,OAAO,MAAMC,UAAU,GAAEC,QAAD,KAAa;AAACL,EAAAA,IAAI,EAACN,cAAN;AAAqBW,EAAAA;AAArB,CAAb,CAAjB,C,CACP;;AACA,OAAO,MAAMC,MAAM,GAAC,MAAI;AACpB;AACAT,EAAAA,YAAY,CAACU,UAAb,GAFoB,CAGpB;;AACA,SAAO;AAACP,IAAAA,IAAI,EAACL;AAAN,GAAP;AACH,CALM,C,CAOP;;AACA,OAAO,MAAMa,KAAK,GAAC,CAACC,QAAD,EAAUC,QAAV,KAAqB;AACpC,SAAO,MAAMC,QAAN,IAAgB;AACnB;AACF,UAAMC,MAAM,GAAC,MAAOhB,QAAQ,CAACa,QAAD,EAAUC,QAAV,CAA5B,CAFqB,CAE4B;AAC/C;;AACA,QAAGE,MAAM,CAACC,MAAP,KAAgB,CAAnB,EAAqB;AACjB,YAAMV,IAAI,GAACS,MAAM,CAACX,IAAlB,CADiB,CAEjB;;AACAJ,MAAAA,YAAY,CAACiB,QAAb,CAAsBX,IAAtB,EAHiB,CAIjB;;AACAQ,MAAAA,QAAQ,CAACT,WAAW,CAACC,IAAD,CAAZ,CAAR;AACH,KAND,CAOA;AAPA,SAQI;AACA,cAAMY,GAAG,GAACH,MAAM,CAACG,GAAjB;AACAJ,QAAAA,QAAQ,CAACP,UAAU,CAACW,GAAD,CAAX,CAAR;AACH;AACJ,GAhBD;AAiBH,CAlBM","sourcesContent":["//包含n个actions_creator函数的模块\r\n//同步action 对象{type:'xxx',data:数据值}\r\n\r\n//异步action 函数dispatch=>{}\r\n\r\n//设置头部标题的同步action\r\nimport {SET_HEAD_TITLE,RECEIVE_USER,SHOW_ERROR_MSG, RESET_USER} from './action-types'\r\nimport {reqLogin} from '../api/index'\r\nimport storageUtils from '../utils/storageUtils'\r\nexport const setHeadTitle=(headTitle)=>({type:SET_HEAD_TITLE,data:headTitle})\r\n\r\n\r\n//接收用户的同步action\r\nexport const receiveUser=(user)=>({type:RECEIVE_USER,user})\r\n//显示错误信息的同步action\r\nexport const showErrMsg=(errorMsg)=>({type:SHOW_ERROR_MSG,errorMsg})\r\n//退出登录的同步action\r\nexport const logout=()=>{\r\n    //删除local中的user\r\n    storageUtils.removeUser()\r\n    //返回action对象\r\n    return {type:RESET_USER}\r\n}\r\n\r\n//登录的异步action\r\nexport const login=(username,password)=>{\r\n    return async dispatch=>{\r\n        //1.执行异步ajax请求\r\n      const result=await  reqLogin(username,password)  //{status:0,data:user}  {status:1,msg:'xxxx'}\r\n        //2.如果成功，分发成功的同步action\r\n        if(result.status===0){\r\n            const user=result.data\r\n            //保存local中\r\n            storageUtils.saveUser(user)\r\n            //分发接收用户的同步action\r\n            dispatch(receiveUser(user))\r\n        }\r\n        //3.如果失败，分发失败的同步action\r\n        else{\r\n            const msg=result.msg\r\n            dispatch(showErrMsg(msg))\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}