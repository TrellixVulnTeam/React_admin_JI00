{"ast":null,"code":"import _objectSpread from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import\"antd/es/input/style\";import _Input from\"antd/es/input\";import _classCallCheck from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/itryl/Desktop/React client/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import\"antd/es/tree/style\";import _Tree from\"antd/es/tree\";import\"antd/es/form/style\";import _Form from\"antd/es/form\";import React,{PureComponent}from'react';import menuList from'../../config/menuConfig';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Item=_Form.Item;var TreeNode=_Tree.TreeNode;//添加分类的form组件\nvar AuthForm=/*#__PURE__*/function(_PureComponent){_inherits(AuthForm,_PureComponent);var _super=_createSuper(AuthForm);function AuthForm(props){var _this;_classCallCheck(this,AuthForm);_this=_super.call(this,props);_this.getMenus=function(){return _this.state.checkedKeys;};_this.onCheck=function(checkedKeys,info){_this.setState({checkedKeys:checkedKeys});//重新更新选中的状态\n};_this.getTreeNodes=function(menuList){return menuList.reduce(function(pre,item){pre.push(/*#__PURE__*/_jsx(TreeNode,{title:item.title,children:item.children?_this.getTreeNodes(item.children):null},item.key));return pre;},[]);};var menus=_this.props.role.menus;//根据传入角色的menus生成初始状态\n_this.state={checkedKeys:menus//先初始化默认role里面的选中状态 如果后面有选中 重新更新checkedKeys\n};return _this;}_createClass(AuthForm,[{key:\"componentWillMount\",value:function componentWillMount(){//调用生成树形结构的方法\nthis.treeNodes=this.getTreeNodes(menuList);}//根据新传入的role来更新checkedKeys状态(当组件接收到新的属性时自动调用)\n},{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps){var menus=nextProps.role.menus;this.setState({checkedKeys:menus});//不会触发render更新\n// this.state.checkedKeys=menus   //不推荐\n}},{key:\"render\",value:function render(){var formItemLatout={labelCol:{span:4},//左侧label的宽度\nwrapperCol:{span:15}//右侧包裹的宽度\n};var role=this.props.role;var checkedKeys=this.state.checkedKeys;return/*#__PURE__*/_jsxs(_Form,{children:[/*#__PURE__*/_jsx(Item,_objectSpread(_objectSpread({label:\"\\u89D2\\u8272\\u540D\\u79F0\"},formItemLatout),{},{children:/*#__PURE__*/_jsx(_Input,{value:role.name,disabled:true})})),/*#__PURE__*/_jsx(_Tree,{checkable:true,defaultExpandAll:true,checkedKeys:checkedKeys//当前点击行的role的权限   选中状态的数组\n,onCheck:this.onCheck//当前分支选中的事件\n,children:/*#__PURE__*/_jsx(TreeNode,{title:\"\\u5E73\\u53F0\\u6743\\u9650\",children:this.treeNodes},\"all\")})]});}}]);return AuthForm;}(PureComponent);export{AuthForm as default};","map":{"version":3,"sources":["C:/Users/itryl/Desktop/React client/client/src/pages/role/auth-form.jsx"],"names":["React","PureComponent","menuList","Item","TreeNode","AuthForm","props","getMenus","state","checkedKeys","onCheck","info","setState","getTreeNodes","reduce","pre","item","push","title","children","key","menus","role","treeNodes","nextProps","formItemLatout","labelCol","span","wrapperCol","name"],"mappings":"w8BAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,KAAqC,OAArC,CAGA,MAAOC,CAAAA,QAAP,KAAqB,yBAArB,C,wFACA,GAAMC,CAAAA,IAAI,CAAG,MAAKA,IAAlB,CACA,GAAQC,CAAAA,QAAR,OAAQA,QAAR,CACA;GACqBC,CAAAA,Q,4GACjB,kBAAYC,KAAZ,CAAkB,0CACd,uBAAMA,KAAN,EADc,MAWlBC,QAXkB,CAWT,UAAI,CACT,MAAO,OAAKC,KAAL,CAAWC,WAAlB,CACH,CAbiB,OAgBlBC,OAhBkB,CAgBV,SAACD,WAAD,CAAcE,IAAd,CAAqB,CACzB,MAAKC,QAAL,CAAc,CAACH,WAAW,CAACA,WAAb,CAAd,EAA2C;AAC9C,CAlBiB,OAqBlBI,YArBkB,CAqBL,SAACX,QAAD,CAAY,CACxB,MAAOA,CAAAA,QAAQ,CAACY,MAAT,CAAgB,SAACC,GAAD,CAAKC,IAAL,CAAY,CAC9BD,GAAG,CAACE,IAAJ,cACE,KAAC,QAAD,EAAU,KAAK,CAAED,IAAI,CAACE,KAAtB,UAEKF,IAAI,CAACG,QAAL,CAAc,MAAKN,YAAL,CAAkBG,IAAI,CAACG,QAAvB,CAAd,CAA+C,IAFpD,EAAkCH,IAAI,CAACI,GAAvC,CADF,EAMA,MAAOL,CAAAA,GAAP,CACH,CARK,CAQJ,EARI,CAAP,CASA,CA/BiB,CAEd,GAAMM,CAAAA,KAAK,CAAC,MAAKf,KAAL,CAAWgB,IAAX,CAAgBD,KAA5B,CAAsC;AACtC,MAAKb,KAAL,CAAW,CACPC,WAAW,CAACY,KAAQ;AADb,CAAX,CAHc,aAMjB,C,uDA2BD,6BAAoB,CAAG;AACnB,KAAKE,SAAL,CAAe,KAAKV,YAAL,CAAkBX,QAAlB,CAAf,CACH,CAED;yCACA,mCAA0BsB,SAA1B,CAAoC,CAChC,GAAMH,CAAAA,KAAK,CAACG,SAAS,CAACF,IAAV,CAAeD,KAA3B,CACA,KAAKT,QAAL,CAAc,CAACH,WAAW,CAACY,KAAb,CAAd,EAAqC;AACrC;AACH,C,sBACD,iBAAS,CACL,GAAMI,CAAAA,cAAc,CAAG,CACnBC,QAAQ,CAAE,CAAEC,IAAI,CAAE,CAAR,CADS,CACK;AACxBC,UAAU,CAAE,CAAED,IAAI,CAAE,EAAR,CAAa;AAFN,CAAvB,CAIA,GAAQL,CAAAA,IAAR,CAAiB,KAAKhB,KAAtB,CAAQgB,IAAR,CACA,GAAOb,CAAAA,WAAP,CAAoB,KAAKD,KAAzB,CAAOC,WAAP,CACA,mBACI,oCACI,KAAC,IAAD,8BAAM,KAAK,CAAC,0BAAZ,EAAuBgB,cAAvB,4BACI,aAAO,KAAK,CAAEH,IAAI,CAACO,IAAnB,CAAyB,QAAQ,KAAjC,EADJ,GADJ,cAII,YACI,SAAS,KADb,CAEI,gBAAgB,CAAE,IAFtB,CAGI,WAAW,CAAEpB,WAAe;AAHhC,CAII,OAAO,CAAE,KAAKC,OAAW;AAJ7B,uBAMI,KAAC,QAAD,EAAU,KAAK,CAAC,0BAAhB,UACK,KAAKa,SADV,EAA2B,KAA3B,CANJ,EAJJ,GADJ,CAwBH,C,sBA3EiCtB,a,SAAjBI,Q","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport { Input, Form, Tree } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport menuList from '../../config/menuConfig'\r\nconst Item = Form.Item\r\nconst { TreeNode } = Tree;\r\n//添加分类的form组件\r\nexport default class AuthForm extends PureComponent {\r\n    constructor(props){\r\n        super(props)\r\n        const menus=this.props.role.menus     //根据传入角色的menus生成初始状态\r\n        this.state={\r\n            checkedKeys:menus   //先初始化默认role里面的选中状态 如果后面有选中 重新更新checkedKeys\r\n        }\r\n    }\r\n    static propTypes = {\r\n        role: PropTypes.object,   //从父组件接收到的role\r\n    }\r\n    //定义一个方法 给父组件传递收集的信息\r\n    getMenus=()=>{\r\n        return this.state.checkedKeys\r\n    }\r\n\r\n    //树形控件选中时候的回调  cheeckedKetys所有选中时的数组\r\n    onCheck=(checkedKeys, info)=>{   \r\n        this.setState({checkedKeys:checkedKeys})   //重新更新选中的状态\r\n    }\r\n\r\n    //定义生成树形结构的方法\r\n    getTreeNodes=(menuList)=>{\r\n     return menuList.reduce((pre,item)=>{\r\n          pre.push(\r\n            <TreeNode title={item.title} key={item.key} >\r\n                {/* 如果当前的节点有子节点，就继续递归 */}\r\n                {item.children?this.getTreeNodes(item.children):null}  \r\n            </TreeNode>\r\n          )\r\n          return pre\r\n      },[])\r\n    }\r\n\r\n    componentWillMount(){  //调用生成树形结构的方法\r\n        this.treeNodes=this.getTreeNodes(menuList)\r\n    }\r\n\r\n    //根据新传入的role来更新checkedKeys状态(当组件接收到新的属性时自动调用)\r\n    componentWillReceiveProps(nextProps){\r\n        const menus=nextProps.role.menus\r\n        this.setState({checkedKeys:menus})   //不会触发render更新\r\n        // this.state.checkedKeys=menus   //不推荐\r\n    }\r\n    render() {\r\n        const formItemLatout = {\r\n            labelCol: { span: 4 },  //左侧label的宽度\r\n            wrapperCol: { span: 15 } //右侧包裹的宽度\r\n        }\r\n        const { role } = this.props\r\n        const {checkedKeys}=this.state\r\n        return (\r\n            <Form>\r\n                <Item label='角色名称' {...formItemLatout}>\r\n                    <Input value={role.name} disabled></Input>\r\n                </Item>\r\n                <Tree\r\n                    checkable\r\n                    defaultExpandAll={true}\r\n                    checkedKeys={checkedKeys}   //当前点击行的role的权限   选中状态的数组\r\n                    onCheck={this.onCheck}   //当前分支选中的事件\r\n                > \r\n                    <TreeNode title=\"平台权限\" key=\"all\">\r\n                        {this.treeNodes}\r\n                        {/* <TreeNode title=\"parent 1-0\" key=\"0-0-0\">\r\n                            <TreeNode title=\"leaf\" key=\"0-0-0-0\"  />\r\n                            <TreeNode title=\"leaf\" key=\"0-0-0-1\" />\r\n                        </TreeNode>\r\n                        <TreeNode title=\"parent 1-1\" key=\"0-0-1\">\r\n                            <TreeNode  key=\"0-0-1-0\" />\r\n                        </TreeNode> */}\r\n                    </TreeNode>\r\n                </Tree>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}